Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition

    6 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    7 returnType: type

    8 functionBody: '{' statementList '}'

    9 formalParameters: empty
   10                 | formalParameterList

   11 formalParameterList: formalParameterDef
   12                    | formalParameterList ',' formalParameterDef

   13 formalParameterDef: type IDENTIFIER

   14 $@1: /* empty */

   15 variableDefinition: type $@1 variableList

   16 variableList: variableDeclarations
   17             | variableList ',' variableDeclarations

   18 variableDeclarations: IDENTIFIER '=' expression

   19 expression: atom

   20 atom: IDENTIFIER
   21     | INTEGER
   22     | DOUBLE
   23     | STRING
   24     | NOTHING
   25     | EMPTY
   26     | '(' expression ')'

   27 empty: /* empty */

   28 type: INTEGER_T
   29     | DOUBLE_T
   30     | STRING_T
   31     | FUNCTION_T


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 26
')' (41) 6 26
',' (44) 12 17
':' (58) 6
';' (59) 4
'=' (61) 18
'{' (123) 8
'}' (125) 8
error (256)
FUNCTION (258) 6
NOTHING (259) 24
EMPTY (260) 25
INTEGER_T (261) 28
DOUBLE_T (262) 29
STRING_T (263) 30
FUNCTION_T (264) 31
IDENTIFIER (265) 6 13 18 20
STRING (266) 23
INTEGER (267) 21
DOUBLE (268) 22


Nonterminals, with rules where they appear

$accept (22)
    on left: 0
program (23)
    on left: 1, on right: 0
statementList (24)
    on left: 2 3, on right: 1 3 8
statement (25)
    on left: 4 5, on right: 3
functionDefinition (26)
    on left: 6, on right: 5
returnType (27)
    on left: 7, on right: 6
functionBody (28)
    on left: 8, on right: 6
formalParameters (29)
    on left: 9 10, on right: 6
formalParameterList (30)
    on left: 11 12, on right: 10 12
formalParameterDef (31)
    on left: 13, on right: 11 12
variableDefinition (32)
    on left: 15, on right: 4
$@1 (33)
    on left: 14, on right: 15
variableList (34)
    on left: 16 17, on right: 15 17
variableDeclarations (35)
    on left: 18, on right: 16 17
expression (36)
    on left: 19, on right: 18 26
atom (37)
    on left: 20 21 22 23 24 25 26, on right: 19
empty (38)
    on left: 27, on right: 2 9
type (39)
    on left: 28 29 30 31, on right: 7 13 15


state 0

    0 $accept: . program $end

    $default  reduce using rule 27 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9

    $default  reduce using rule 1 (program)

    statement           go to state 10
    functionDefinition  go to state 11
    variableDefinition  go to state 12
    type                go to state 13


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

    6 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 14


state 6

   28 type: INTEGER_T .

    $default  reduce using rule 28 (type)


state 7

   29 type: DOUBLE_T .

    $default  reduce using rule 29 (type)


state 8

   30 type: STRING_T .

    $default  reduce using rule 30 (type)


state 9

   31 type: FUNCTION_T .

    $default  reduce using rule 31 (type)


state 10

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 11

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 12

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 15


state 13

   15 variableDefinition: type . $@1 variableList

    $default  reduce using rule 14 ($@1)

    $@1  go to state 16


state 14

    6 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 17


state 15

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 16

   15 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 18

    variableList          go to state 19
    variableDeclarations  go to state 20


state 17

    6 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9

    $default  reduce using rule 27 (empty)

    formalParameters     go to state 21
    formalParameterList  go to state 22
    formalParameterDef   go to state 23
    empty                go to state 24
    type                 go to state 25


state 18

   18 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 26


state 19

   15 variableDefinition: type $@1 variableList .
   17 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 27

    $default  reduce using rule 15 (variableDefinition)


state 20

   16 variableList: variableDeclarations .

    $default  reduce using rule 16 (variableList)


state 21

    6 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 28


state 22

   10 formalParameters: formalParameterList .
   12 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 29

    $default  reduce using rule 10 (formalParameters)


state 23

   11 formalParameterList: formalParameterDef .

    $default  reduce using rule 11 (formalParameterList)


state 24

    9 formalParameters: empty .

    $default  reduce using rule 9 (formalParameters)


state 25

   13 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 30


state 26

   18 variableDeclarations: IDENTIFIER '=' . expression

    NOTHING     shift, and go to state 31
    EMPTY       shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    STRING      shift, and go to state 34
    INTEGER     shift, and go to state 35
    DOUBLE      shift, and go to state 36
    '('         shift, and go to state 37

    expression  go to state 38
    atom        go to state 39


state 27

   17 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 18

    variableDeclarations  go to state 40


state 28

    6 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 41


state 29

   12 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9

    formalParameterDef  go to state 42
    type                go to state 25


state 30

   13 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 13 (formalParameterDef)


state 31

   24 atom: NOTHING .

    $default  reduce using rule 24 (atom)


state 32

   25 atom: EMPTY .

    $default  reduce using rule 25 (atom)


state 33

   20 atom: IDENTIFIER .

    $default  reduce using rule 20 (atom)


state 34

   23 atom: STRING .

    $default  reduce using rule 23 (atom)


state 35

   21 atom: INTEGER .

    $default  reduce using rule 21 (atom)


state 36

   22 atom: DOUBLE .

    $default  reduce using rule 22 (atom)


state 37

   26 atom: '(' . expression ')'

    NOTHING     shift, and go to state 31
    EMPTY       shift, and go to state 32
    IDENTIFIER  shift, and go to state 33
    STRING      shift, and go to state 34
    INTEGER     shift, and go to state 35
    DOUBLE      shift, and go to state 36
    '('         shift, and go to state 37

    expression  go to state 43
    atom        go to state 39


state 38

   18 variableDeclarations: IDENTIFIER '=' expression .

    $default  reduce using rule 18 (variableDeclarations)


state 39

   19 expression: atom .

    $default  reduce using rule 19 (expression)


state 40

   17 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 17 (variableList)


state 41

    6 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9

    returnType  go to state 44
    type        go to state 45


state 42

   12 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 12 (formalParameterList)


state 43

   26 atom: '(' expression . ')'

    ')'  shift, and go to state 46


state 44

    6 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 47

    functionBody  go to state 48


state 45

    7 returnType: type .

    $default  reduce using rule 7 (returnType)


state 46

   26 atom: '(' expression ')' .

    $default  reduce using rule 26 (atom)


state 47

    8 functionBody: '{' . statementList '}'

    $default  reduce using rule 27 (empty)

    statementList  go to state 49
    empty          go to state 3


state 48

    6 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 6 (functionDefinition)


state 49

    3 statementList: statementList . statement
    8 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    '}'         shift, and go to state 50

    statement           go to state 10
    functionDefinition  go to state 11
    variableDefinition  go to state 12
    type                go to state 13


state 50

    8 functionBody: '{' statementList '}' .

    $default  reduce using rule 8 (functionBody)
