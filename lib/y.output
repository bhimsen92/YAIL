Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | expression ';'

    7 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    8 returnType: type

    9 functionBody: '{' statementList '}'

   10 formalParameters: empty
   11                 | formalParameterList

   12 formalParameterList: formalParameterDef
   13                    | formalParameterList ',' formalParameterDef

   14 formalParameterDef: type IDENTIFIER

   15 $@1: /* empty */

   16 variableDefinition: type $@1 variableList

   17 variableList: variableDeclarations
   18             | variableList ',' variableDeclarations

   19 variableDeclarations: IDENTIFIER '=' expression

   20 expression: atom

   21 atom: IDENTIFIER
   22     | INTEGER
   23     | DOUBLE
   24     | STRING
   25     | NOTHING
   26     | EMPTY
   27     | functCall
   28     | '(' expression ')'

   29 empty: /* empty */

   30 type: INTEGER_T
   31     | DOUBLE_T
   32     | STRING_T
   33     | FUNCTION_T

   34 functCall: IDENTIFIER '(' arguments ')'

   35 arguments: empty
   36          | arglist

   37 arglist: expression
   38        | arglist ',' expression


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7 28 34
')' (41) 7 28 34
',' (44) 13 18 38
':' (58) 7
';' (59) 4 6
'=' (61) 19
'{' (123) 9
'}' (125) 9
error (256)
FUNCTION (258) 7
NOTHING (259) 25
EMPTY (260) 26
INTEGER_T (261) 30
DOUBLE_T (262) 31
STRING_T (263) 32
FUNCTION_T (264) 33
IDENTIFIER (265) 7 14 19 21 34
STRING (266) 24
INTEGER (267) 22
DOUBLE (268) 23


Nonterminals, with rules where they appear

$accept (22)
    on left: 0
program (23)
    on left: 1, on right: 0
statementList (24)
    on left: 2 3, on right: 1 3 9
statement (25)
    on left: 4 5 6, on right: 3
functionDefinition (26)
    on left: 7, on right: 5
returnType (27)
    on left: 8, on right: 7
functionBody (28)
    on left: 9, on right: 7
formalParameters (29)
    on left: 10 11, on right: 7
formalParameterList (30)
    on left: 12 13, on right: 11 13
formalParameterDef (31)
    on left: 14, on right: 12 13
variableDefinition (32)
    on left: 16, on right: 4
$@1 (33)
    on left: 15, on right: 16
variableList (34)
    on left: 17 18, on right: 16 18
variableDeclarations (35)
    on left: 19, on right: 17 18
expression (36)
    on left: 20, on right: 6 19 28 37 38
atom (37)
    on left: 21 22 23 24 25 26 27 28, on right: 20
empty (38)
    on left: 29, on right: 2 10 35
type (39)
    on left: 30 31 32 33, on right: 8 14 16
functCall (40)
    on left: 34, on right: 27
arguments (41)
    on left: 35 36, on right: 34
arglist (42)
    on left: 37 38, on right: 36 38


state 0

    0 $accept: . program $end

    $default  reduce using rule 29 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    NOTHING     shift, and go to state 6
    EMPTY       shift, and go to state 7
    INTEGER_T   shift, and go to state 8
    DOUBLE_T    shift, and go to state 9
    STRING_T    shift, and go to state 10
    FUNCTION_T  shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    '('         shift, and go to state 16

    $default  reduce using rule 1 (program)

    statement           go to state 17
    functionDefinition  go to state 18
    variableDefinition  go to state 19
    expression          go to state 20
    atom                go to state 21
    type                go to state 22
    functCall           go to state 23


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

    7 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 24


state 6

   25 atom: NOTHING .

    $default  reduce using rule 25 (atom)


state 7

   26 atom: EMPTY .

    $default  reduce using rule 26 (atom)


state 8

   30 type: INTEGER_T .

    $default  reduce using rule 30 (type)


state 9

   31 type: DOUBLE_T .

    $default  reduce using rule 31 (type)


state 10

   32 type: STRING_T .

    $default  reduce using rule 32 (type)


state 11

   33 type: FUNCTION_T .

    $default  reduce using rule 33 (type)


state 12

   21 atom: IDENTIFIER .
   34 functCall: IDENTIFIER . '(' arguments ')'

    '('  shift, and go to state 25

    $default  reduce using rule 21 (atom)


state 13

   24 atom: STRING .

    $default  reduce using rule 24 (atom)


state 14

   22 atom: INTEGER .

    $default  reduce using rule 22 (atom)


state 15

   23 atom: DOUBLE .

    $default  reduce using rule 23 (atom)


state 16

   28 atom: '(' . expression ')'

    NOTHING     shift, and go to state 6
    EMPTY       shift, and go to state 7
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    '('         shift, and go to state 16

    expression  go to state 26
    atom        go to state 21
    functCall   go to state 23


state 17

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 18

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 19

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 27


state 20

    6 statement: expression . ';'

    ';'  shift, and go to state 28


state 21

   20 expression: atom .

    $default  reduce using rule 20 (expression)


state 22

   16 variableDefinition: type . $@1 variableList

    $default  reduce using rule 15 ($@1)

    $@1  go to state 29


state 23

   27 atom: functCall .

    $default  reduce using rule 27 (atom)


state 24

    7 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 30


state 25

   34 functCall: IDENTIFIER '(' . arguments ')'

    NOTHING     shift, and go to state 6
    EMPTY       shift, and go to state 7
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    '('         shift, and go to state 16

    $default  reduce using rule 29 (empty)

    expression  go to state 31
    atom        go to state 21
    empty       go to state 32
    functCall   go to state 23
    arguments   go to state 33
    arglist     go to state 34


state 26

   28 atom: '(' expression . ')'

    ')'  shift, and go to state 35


state 27

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 28

    6 statement: expression ';' .

    $default  reduce using rule 6 (statement)


state 29

   16 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 36

    variableList          go to state 37
    variableDeclarations  go to state 38


state 30

    7 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 8
    DOUBLE_T    shift, and go to state 9
    STRING_T    shift, and go to state 10
    FUNCTION_T  shift, and go to state 11

    $default  reduce using rule 29 (empty)

    formalParameters     go to state 39
    formalParameterList  go to state 40
    formalParameterDef   go to state 41
    empty                go to state 42
    type                 go to state 43


state 31

   37 arglist: expression .

    $default  reduce using rule 37 (arglist)


state 32

   35 arguments: empty .

    $default  reduce using rule 35 (arguments)


state 33

   34 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 44


state 34

   36 arguments: arglist .
   38 arglist: arglist . ',' expression

    ','  shift, and go to state 45

    $default  reduce using rule 36 (arguments)


state 35

   28 atom: '(' expression ')' .

    $default  reduce using rule 28 (atom)


state 36

   19 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 46


state 37

   16 variableDefinition: type $@1 variableList .
   18 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 47

    $default  reduce using rule 16 (variableDefinition)


state 38

   17 variableList: variableDeclarations .

    $default  reduce using rule 17 (variableList)


state 39

    7 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 48


state 40

   11 formalParameters: formalParameterList .
   13 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 49

    $default  reduce using rule 11 (formalParameters)


state 41

   12 formalParameterList: formalParameterDef .

    $default  reduce using rule 12 (formalParameterList)


state 42

   10 formalParameters: empty .

    $default  reduce using rule 10 (formalParameters)


state 43

   14 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 50


state 44

   34 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 34 (functCall)


state 45

   38 arglist: arglist ',' . expression

    NOTHING     shift, and go to state 6
    EMPTY       shift, and go to state 7
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    '('         shift, and go to state 16

    expression  go to state 51
    atom        go to state 21
    functCall   go to state 23


state 46

   19 variableDeclarations: IDENTIFIER '=' . expression

    NOTHING     shift, and go to state 6
    EMPTY       shift, and go to state 7
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    '('         shift, and go to state 16

    expression  go to state 52
    atom        go to state 21
    functCall   go to state 23


state 47

   18 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 36

    variableDeclarations  go to state 53


state 48

    7 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 54


state 49

   13 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 8
    DOUBLE_T    shift, and go to state 9
    STRING_T    shift, and go to state 10
    FUNCTION_T  shift, and go to state 11

    formalParameterDef  go to state 55
    type                go to state 43


state 50

   14 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 14 (formalParameterDef)


state 51

   38 arglist: arglist ',' expression .

    $default  reduce using rule 38 (arglist)


state 52

   19 variableDeclarations: IDENTIFIER '=' expression .

    $default  reduce using rule 19 (variableDeclarations)


state 53

   18 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 18 (variableList)


state 54

    7 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 8
    DOUBLE_T    shift, and go to state 9
    STRING_T    shift, and go to state 10
    FUNCTION_T  shift, and go to state 11

    returnType  go to state 56
    type        go to state 57


state 55

   13 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 13 (formalParameterList)


state 56

    7 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 58

    functionBody  go to state 59


state 57

    8 returnType: type .

    $default  reduce using rule 8 (returnType)


state 58

    9 functionBody: '{' . statementList '}'

    $default  reduce using rule 29 (empty)

    statementList  go to state 60
    empty          go to state 3


state 59

    7 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 7 (functionDefinition)


state 60

    3 statementList: statementList . statement
    9 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    NOTHING     shift, and go to state 6
    EMPTY       shift, and go to state 7
    INTEGER_T   shift, and go to state 8
    DOUBLE_T    shift, and go to state 9
    STRING_T    shift, and go to state 10
    FUNCTION_T  shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    '('         shift, and go to state 16
    '}'         shift, and go to state 61

    statement           go to state 17
    functionDefinition  go to state 18
    variableDefinition  go to state 19
    expression          go to state 20
    atom                go to state 21
    type                go to state 22
    functCall           go to state 23


state 61

    9 functionBody: '{' statementList '}' .

    $default  reduce using rule 9 (functionBody)
