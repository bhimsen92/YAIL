Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | IF '(' conditionalExpression ')' block elseBlock
    7          | RETURN conditionalExpression ';'
    8          | conditionalExpression ';'

    9 elseBlock: ELSE block
   10          | ELIF '(' conditionalExpression ')' block elseBlock

   11 block: statement
   12      | '{' statementList '}'

   13 conditionalExpression: orExp

   14 orExp: andExp
   15      | orExp OR andExp

   16 andExp: equality
   17       | andExp AND equality

   18 equality: relationalOp
   19         | equality EQUAL relationalOp

   20 relationalOp: expression '<' expression
   21             | expression LE expression
   22             | expression '>' expression
   23             | expression GE expression
   24             | expression

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

   26 returnType: type

   27 functionBody: '{' statementList '}'

   28 formalParameters: empty
   29                 | formalParameterList

   30 formalParameterList: formalParameterDef
   31                    | formalParameterList ',' formalParameterDef

   32 formalParameterDef: type IDENTIFIER

   33 $@1: /* empty */

   34 variableDefinition: type $@1 variableList

   35 variableList: variableDeclarations
   36             | variableList ',' variableDeclarations

   37 variableDeclarations: IDENTIFIER '=' expression

   38 expression: expression '+' term
   39           | expression '-' term
   40           | term

   41 term: term '*' power
   42     | term '/' power
   43     | power

   44 power: power '^' unary
   45      | unary

   46 unary: NOT unary
   47      | '-' unary
   48      | atom

   49 atom: IDENTIFIER
   50     | INTEGER
   51     | DOUBLE
   52     | STRING
   53     | NOTHING
   54     | EMPTY
   55     | functCall
   56     | list
   57     | indexOp
   58     | slice
   59     | memberShipOperator
   60     | SPAWN functCall
   61     | SYNC
   62     | '(' conditionalExpression ')'

   63 empty: /* empty */

   64 type: INTEGER_T
   65     | DOUBLE_T
   66     | STRING_T
   67     | FUNCTION_T
   68     | NOTHING
   69     | BOOL_T
   70     | INTEGER_T '[' ']'
   71     | DOUBLE_T '[' ']'

   72 functCall: IDENTIFIER '(' arguments ')'

   73 arguments: empty
   74          | arglist

   75 arglist: expression
   76        | arglist ',' expression

   77 list: '[' valueList ']'

   78 valueList: empty
   79          | expression
   80          | valueList ',' expression

   81 indexOp: IDENTIFIER '[' expression ']'

   82 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']'

   83 sliceExp: empty
   84         | expression

   85 memberShipOperator: IDENTIFIER '.' IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 10 25 62 72
')' (41) 6 10 25 62 72
'*' (42) 41
'+' (43) 38
',' (44) 31 36 76 80
'-' (45) 39 47
'.' (46) 85
'/' (47) 42
':' (58) 25 82
';' (59) 4 7 8
'<' (60) 20
'=' (61) 37
'>' (62) 22
'[' (91) 70 71 77 81 82
']' (93) 70 71 77 81 82
'^' (94) 44
'{' (123) 12 27
'}' (125) 12 27
error (256)
FUNCTION (258) 25
INTEGER_T (259) 64 70
DOUBLE_T (260) 65 71
STRING_T (261) 66
FUNCTION_T (262) 67
BOOL_T (263) 69
OR (264) 15
AND (265) 17
EQUAL (266) 19
LE (267) 21
GE (268) 23
IF (269) 6
ELSE (270) 9
NOT (271) 46
ELIF (272) 10
RETURN (273) 7
SPAWN (274) 60
SYNC (275) 61
IDENTIFIER (276) 25 32 37 49 72 81 82 85
STRING (277) 52
INTEGER (278) 50
DOUBLE (279) 51
NOTHING (280) 53 68
EMPTY (281) 54


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
statementList (47)
    on left: 2 3, on right: 1 3 12 27
statement (48)
    on left: 4 5 6 7 8, on right: 3 11
elseBlock (49)
    on left: 9 10, on right: 6 10
block (50)
    on left: 11 12, on right: 6 9 10
conditionalExpression (51)
    on left: 13, on right: 6 7 8 10 62
orExp (52)
    on left: 14 15, on right: 13 15
andExp (53)
    on left: 16 17, on right: 14 15 17
equality (54)
    on left: 18 19, on right: 16 17 19
relationalOp (55)
    on left: 20 21 22 23 24, on right: 18 19
functionDefinition (56)
    on left: 25, on right: 5
returnType (57)
    on left: 26, on right: 25
functionBody (58)
    on left: 27, on right: 25
formalParameters (59)
    on left: 28 29, on right: 25
formalParameterList (60)
    on left: 30 31, on right: 29 31
formalParameterDef (61)
    on left: 32, on right: 30 31
variableDefinition (62)
    on left: 34, on right: 4
$@1 (63)
    on left: 33, on right: 34
variableList (64)
    on left: 35 36, on right: 34 36
variableDeclarations (65)
    on left: 37, on right: 35 36
expression (66)
    on left: 38 39 40, on right: 20 21 22 23 24 37 38 39 75 76 79 80
    81 84
term (67)
    on left: 41 42 43, on right: 38 39 40 41 42
power (68)
    on left: 44 45, on right: 41 42 43 44
unary (69)
    on left: 46 47 48, on right: 44 45 46 47
atom (70)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60 61 62, on right: 48
empty (71)
    on left: 63, on right: 2 28 73 78 83
type (72)
    on left: 64 65 66 67 68 69 70 71, on right: 26 32 34
functCall (73)
    on left: 72, on right: 55 60
arguments (74)
    on left: 73 74, on right: 72
arglist (75)
    on left: 75 76, on right: 74 76
list (76)
    on left: 77, on right: 56
valueList (77)
    on left: 78 79 80, on right: 77 80
indexOp (78)
    on left: 81, on right: 57
slice (79)
    on left: 82, on right: 58
sliceExp (80)
    on left: 83 84, on right: 82
memberShipOperator (81)
    on left: 85, on right: 59


state 0

    0 $accept: . program $end

    $default  reduce using rule 63 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 20
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    $default  reduce using rule 1 (program)

    statement              go to state 25
    conditionalExpression  go to state 26
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    functionDefinition     go to state 31
    variableDefinition     go to state 32
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    type                   go to state 38
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

   25 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 44


state 6

   64 type: INTEGER_T .
   70     | INTEGER_T . '[' ']'

    '['  shift, and go to state 45

    $default  reduce using rule 64 (type)


state 7

   65 type: DOUBLE_T .
   71     | DOUBLE_T . '[' ']'

    '['  shift, and go to state 46

    $default  reduce using rule 65 (type)


state 8

   66 type: STRING_T .

    $default  reduce using rule 66 (type)


state 9

   67 type: FUNCTION_T .

    $default  reduce using rule 67 (type)


state 10

   69 type: BOOL_T .

    $default  reduce using rule 69 (type)


state 11

    6 statement: IF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 47


state 12

   46 unary: NOT . unary

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    unary               go to state 49
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 13

    7 statement: RETURN . conditionalExpression ';'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    conditionalExpression  go to state 50
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 14

   60 atom: SPAWN . functCall

    IDENTIFIER  shift, and go to state 51

    functCall  go to state 52


state 15

   61 atom: SYNC .

    $default  reduce using rule 61 (atom)


state 16

   49 atom: IDENTIFIER .
   72 functCall: IDENTIFIER . '(' arguments ')'
   81 indexOp: IDENTIFIER . '[' expression ']'
   82 slice: IDENTIFIER . '[' sliceExp ':' sliceExp ']'
   85 memberShipOperator: IDENTIFIER . '.' IDENTIFIER

    '('  shift, and go to state 53
    '['  shift, and go to state 54
    '.'  shift, and go to state 55

    $default  reduce using rule 49 (atom)


state 17

   52 atom: STRING .

    $default  reduce using rule 52 (atom)


state 18

   50 atom: INTEGER .

    $default  reduce using rule 50 (atom)


state 19

   51 atom: DOUBLE .

    $default  reduce using rule 51 (atom)


state 20

   53 atom: NOTHING .
   68 type: NOTHING .

    IDENTIFIER  reduce using rule 68 (type)
    $default    reduce using rule 53 (atom)


state 21

   54 atom: EMPTY .

    $default  reduce using rule 54 (atom)


state 22

   62 atom: '(' . conditionalExpression ')'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    conditionalExpression  go to state 56
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 23

   47 unary: '-' . unary

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    unary               go to state 57
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 24

   77 list: '[' . valueList ']'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    $default  reduce using rule 63 (empty)

    expression          go to state 58
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    empty               go to state 59
    functCall           go to state 39
    list                go to state 40
    valueList           go to state 60
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 25

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 26

    8 statement: conditionalExpression . ';'

    ';'  shift, and go to state 61


state 27

   13 conditionalExpression: orExp .
   15 orExp: orExp . OR andExp

    OR  shift, and go to state 62

    $default  reduce using rule 13 (conditionalExpression)


state 28

   14 orExp: andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 63

    $default  reduce using rule 14 (orExp)


state 29

   16 andExp: equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 64

    $default  reduce using rule 16 (andExp)


state 30

   18 equality: relationalOp .

    $default  reduce using rule 18 (equality)


state 31

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 32

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 65


state 33

   20 relationalOp: expression . '<' expression
   21             | expression . LE expression
   22             | expression . '>' expression
   23             | expression . GE expression
   24             | expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    LE   shift, and go to state 66
    GE   shift, and go to state 67
    '<'  shift, and go to state 68
    '>'  shift, and go to state 69
    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 24 (relationalOp)


state 34

   40 expression: term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 72
    '/'  shift, and go to state 73

    $default  reduce using rule 40 (expression)


state 35

   43 term: power .
   44 power: power . '^' unary

    '^'  shift, and go to state 74

    $default  reduce using rule 43 (term)


state 36

   45 power: unary .

    $default  reduce using rule 45 (power)


state 37

   48 unary: atom .

    $default  reduce using rule 48 (unary)


state 38

   34 variableDefinition: type . $@1 variableList

    $default  reduce using rule 33 ($@1)

    $@1  go to state 75


state 39

   55 atom: functCall .

    $default  reduce using rule 55 (atom)


state 40

   56 atom: list .

    $default  reduce using rule 56 (atom)


state 41

   57 atom: indexOp .

    $default  reduce using rule 57 (atom)


state 42

   58 atom: slice .

    $default  reduce using rule 58 (atom)


state 43

   59 atom: memberShipOperator .

    $default  reduce using rule 59 (atom)


state 44

   25 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 76


state 45

   70 type: INTEGER_T '[' . ']'

    ']'  shift, and go to state 77


state 46

   71 type: DOUBLE_T '[' . ']'

    ']'  shift, and go to state 78


state 47

    6 statement: IF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    conditionalExpression  go to state 79
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 48

   53 atom: NOTHING .

    $default  reduce using rule 53 (atom)


state 49

   46 unary: NOT unary .

    $default  reduce using rule 46 (unary)


state 50

    7 statement: RETURN conditionalExpression . ';'

    ';'  shift, and go to state 80


state 51

   72 functCall: IDENTIFIER . '(' arguments ')'

    '('  shift, and go to state 53


state 52

   60 atom: SPAWN functCall .

    $default  reduce using rule 60 (atom)


state 53

   72 functCall: IDENTIFIER '(' . arguments ')'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    $default  reduce using rule 63 (empty)

    expression          go to state 81
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    empty               go to state 82
    functCall           go to state 39
    arguments           go to state 83
    arglist             go to state 84
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 54

   81 indexOp: IDENTIFIER '[' . expression ']'
   82 slice: IDENTIFIER '[' . sliceExp ':' sliceExp ']'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    $default  reduce using rule 63 (empty)

    expression          go to state 85
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    empty               go to state 86
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    sliceExp            go to state 87
    memberShipOperator  go to state 43


state 55

   85 memberShipOperator: IDENTIFIER '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 88


state 56

   62 atom: '(' conditionalExpression . ')'

    ')'  shift, and go to state 89


state 57

   47 unary: '-' unary .

    $default  reduce using rule 47 (unary)


state 58

   38 expression: expression . '+' term
   39           | expression . '-' term
   79 valueList: expression .

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 79 (valueList)


state 59

   78 valueList: empty .

    $default  reduce using rule 78 (valueList)


state 60

   77 list: '[' valueList . ']'
   80 valueList: valueList . ',' expression

    ','  shift, and go to state 90
    ']'  shift, and go to state 91


state 61

    8 statement: conditionalExpression ';' .

    $default  reduce using rule 8 (statement)


state 62

   15 orExp: orExp OR . andExp

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    andExp              go to state 92
    equality            go to state 29
    relationalOp        go to state 30
    expression          go to state 33
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 63

   17 andExp: andExp AND . equality

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    equality            go to state 93
    relationalOp        go to state 30
    expression          go to state 33
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 64

   19 equality: equality EQUAL . relationalOp

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    relationalOp        go to state 94
    expression          go to state 33
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 65

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 66

   21 relationalOp: expression LE . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    expression          go to state 95
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 67

   23 relationalOp: expression GE . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    expression          go to state 96
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 68

   20 relationalOp: expression '<' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    expression          go to state 97
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 69

   22 relationalOp: expression '>' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    expression          go to state 98
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 70

   38 expression: expression '+' . term

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    term                go to state 99
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 71

   39 expression: expression '-' . term

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    term                go to state 100
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 72

   41 term: term '*' . power

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    power               go to state 101
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 73

   42 term: term '/' . power

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    power               go to state 102
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 74

   44 power: power '^' . unary

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    unary               go to state 103
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 75

   34 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 104

    variableList          go to state 105
    variableDeclarations  go to state 106


state 76

   25 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 107

    $default  reduce using rule 63 (empty)

    formalParameters     go to state 108
    formalParameterList  go to state 109
    formalParameterDef   go to state 110
    empty                go to state 111
    type                 go to state 112


state 77

   70 type: INTEGER_T '[' ']' .

    $default  reduce using rule 70 (type)


state 78

   71 type: DOUBLE_T '[' ']' .

    $default  reduce using rule 71 (type)


state 79

    6 statement: IF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 113


state 80

    7 statement: RETURN conditionalExpression ';' .

    $default  reduce using rule 7 (statement)


state 81

   38 expression: expression . '+' term
   39           | expression . '-' term
   75 arglist: expression .

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 75 (arglist)


state 82

   73 arguments: empty .

    $default  reduce using rule 73 (arguments)


state 83

   72 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 114


state 84

   74 arguments: arglist .
   76 arglist: arglist . ',' expression

    ','  shift, and go to state 115

    $default  reduce using rule 74 (arguments)


state 85

   38 expression: expression . '+' term
   39           | expression . '-' term
   81 indexOp: IDENTIFIER '[' expression . ']'
   84 sliceExp: expression .

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71
    ']'  shift, and go to state 116

    $default  reduce using rule 84 (sliceExp)


state 86

   83 sliceExp: empty .

    $default  reduce using rule 83 (sliceExp)


state 87

   82 slice: IDENTIFIER '[' sliceExp . ':' sliceExp ']'

    ':'  shift, and go to state 117


state 88

   85 memberShipOperator: IDENTIFIER '.' IDENTIFIER .

    $default  reduce using rule 85 (memberShipOperator)


state 89

   62 atom: '(' conditionalExpression ')' .

    $default  reduce using rule 62 (atom)


state 90

   80 valueList: valueList ',' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    expression          go to state 118
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 91

   77 list: '[' valueList ']' .

    $default  reduce using rule 77 (list)


state 92

   15 orExp: orExp OR andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 63

    $default  reduce using rule 15 (orExp)


state 93

   17 andExp: andExp AND equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 64

    $default  reduce using rule 17 (andExp)


state 94

   19 equality: equality EQUAL relationalOp .

    $default  reduce using rule 19 (equality)


state 95

   21 relationalOp: expression LE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 21 (relationalOp)


state 96

   23 relationalOp: expression GE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 23 (relationalOp)


state 97

   20 relationalOp: expression '<' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 20 (relationalOp)


state 98

   22 relationalOp: expression '>' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 22 (relationalOp)


state 99

   38 expression: expression '+' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 72
    '/'  shift, and go to state 73

    $default  reduce using rule 38 (expression)


state 100

   39 expression: expression '-' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 72
    '/'  shift, and go to state 73

    $default  reduce using rule 39 (expression)


state 101

   41 term: term '*' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 74

    $default  reduce using rule 41 (term)


state 102

   42 term: term '/' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 74

    $default  reduce using rule 42 (term)


state 103

   44 power: power '^' unary .

    $default  reduce using rule 44 (power)


state 104

   37 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 119


state 105

   34 variableDefinition: type $@1 variableList .
   36 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 120

    $default  reduce using rule 34 (variableDefinition)


state 106

   35 variableList: variableDeclarations .

    $default  reduce using rule 35 (variableList)


state 107

   68 type: NOTHING .

    $default  reduce using rule 68 (type)


state 108

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 121


state 109

   29 formalParameters: formalParameterList .
   31 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 122

    $default  reduce using rule 29 (formalParameters)


state 110

   30 formalParameterList: formalParameterDef .

    $default  reduce using rule 30 (formalParameterList)


state 111

   28 formalParameters: empty .

    $default  reduce using rule 28 (formalParameters)


state 112

   32 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 123


state 113

    6 statement: IF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 20
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '{'         shift, and go to state 124
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    statement              go to state 125
    block                  go to state 126
    conditionalExpression  go to state 26
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    functionDefinition     go to state 31
    variableDefinition     go to state 32
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    type                   go to state 38
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 114

   72 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 72 (functCall)


state 115

   76 arglist: arglist ',' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    expression          go to state 127
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 116

   81 indexOp: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 81 (indexOp)


state 117

   82 slice: IDENTIFIER '[' sliceExp ':' . sliceExp ']'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    $default  reduce using rule 63 (empty)

    expression          go to state 128
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    empty               go to state 86
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    sliceExp            go to state 129
    memberShipOperator  go to state 43


state 118

   38 expression: expression . '+' term
   39           | expression . '-' term
   80 valueList: valueList ',' expression .

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 80 (valueList)


state 119

   37 variableDeclarations: IDENTIFIER '=' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    expression          go to state 130
    term                go to state 34
    power               go to state 35
    unary               go to state 36
    atom                go to state 37
    functCall           go to state 39
    list                go to state 40
    indexOp             go to state 41
    slice               go to state 42
    memberShipOperator  go to state 43


state 120

   36 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 104

    variableDeclarations  go to state 131


state 121

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 132


state 122

   31 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 107

    formalParameterDef  go to state 133
    type                go to state 112


state 123

   32 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 32 (formalParameterDef)


state 124

   12 block: '{' . statementList '}'

    $default  reduce using rule 63 (empty)

    statementList  go to state 134
    empty          go to state 3


state 125

   11 block: statement .

    $default  reduce using rule 11 (block)


state 126

    6 statement: IF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 135
    ELIF  shift, and go to state 136

    elseBlock  go to state 137


state 127

   38 expression: expression . '+' term
   39           | expression . '-' term
   76 arglist: arglist ',' expression .

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 76 (arglist)


state 128

   38 expression: expression . '+' term
   39           | expression . '-' term
   84 sliceExp: expression .

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 84 (sliceExp)


state 129

   82 slice: IDENTIFIER '[' sliceExp ':' sliceExp . ']'

    ']'  shift, and go to state 138


state 130

   37 variableDeclarations: IDENTIFIER '=' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 70
    '-'  shift, and go to state 71

    $default  reduce using rule 37 (variableDeclarations)


state 131

   36 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 36 (variableList)


state 132

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 107

    returnType  go to state 139
    type        go to state 140


state 133

   31 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 31 (formalParameterList)


state 134

    3 statementList: statementList . statement
   12 block: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 20
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '}'         shift, and go to state 141
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    statement              go to state 25
    conditionalExpression  go to state 26
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    functionDefinition     go to state 31
    variableDefinition     go to state 32
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    type                   go to state 38
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 135

    9 elseBlock: ELSE . block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 20
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '{'         shift, and go to state 124
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    statement              go to state 125
    block                  go to state 142
    conditionalExpression  go to state 26
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    functionDefinition     go to state 31
    variableDefinition     go to state 32
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    type                   go to state 38
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 136

   10 elseBlock: ELIF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 143


state 137

    6 statement: IF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 6 (statement)


state 138

   82 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']' .

    $default  reduce using rule 82 (slice)


state 139

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 144

    functionBody  go to state 145


state 140

   26 returnType: type .

    $default  reduce using rule 26 (returnType)


state 141

   12 block: '{' statementList '}' .

    $default  reduce using rule 12 (block)


state 142

    9 elseBlock: ELSE block .

    $default  reduce using rule 9 (elseBlock)


state 143

   10 elseBlock: ELIF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 48
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    conditionalExpression  go to state 146
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 144

   27 functionBody: '{' . statementList '}'

    $default  reduce using rule 63 (empty)

    statementList  go to state 147
    empty          go to state 3


state 145

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 25 (functionDefinition)


state 146

   10 elseBlock: ELIF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 148


state 147

    3 statementList: statementList . statement
   27 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 20
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '}'         shift, and go to state 149
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    statement              go to state 25
    conditionalExpression  go to state 26
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    functionDefinition     go to state 31
    variableDefinition     go to state 32
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    type                   go to state 38
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 148

   10 elseBlock: ELIF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    INTEGER     shift, and go to state 18
    DOUBLE      shift, and go to state 19
    NOTHING     shift, and go to state 20
    EMPTY       shift, and go to state 21
    '('         shift, and go to state 22
    '{'         shift, and go to state 124
    '-'         shift, and go to state 23
    '['         shift, and go to state 24

    statement              go to state 125
    block                  go to state 150
    conditionalExpression  go to state 26
    orExp                  go to state 27
    andExp                 go to state 28
    equality               go to state 29
    relationalOp           go to state 30
    functionDefinition     go to state 31
    variableDefinition     go to state 32
    expression             go to state 33
    term                   go to state 34
    power                  go to state 35
    unary                  go to state 36
    atom                   go to state 37
    type                   go to state 38
    functCall              go to state 39
    list                   go to state 40
    indexOp                go to state 41
    slice                  go to state 42
    memberShipOperator     go to state 43


state 149

   27 functionBody: '{' statementList '}' .

    $default  reduce using rule 27 (functionBody)


state 150

   10 elseBlock: ELIF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 135
    ELIF  shift, and go to state 136

    elseBlock  go to state 151


state 151

   10 elseBlock: ELIF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 10 (elseBlock)
