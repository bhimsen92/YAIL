Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | IF '(' conditionalExpression ')' block elseBlock
    7          | expression ';'

    8 elseBlock: ELSE block
    9          | ELIF '(' conditionalExpression ')' block elseBlock

   10 block: statement
   11      | '{' statementList '}'

   12 conditionalExpression: orExp

   13 orExp: andExp
   14      | orExp OR andExp

   15 andExp: equality
   16       | andExp AND equality

   17 equality: relationalOp
   18         | equality EQUAL relationalOp

   19 relationalOp: expression '<' expression
   20             | expression LE expression
   21             | expression '>' expression
   22             | expression GE expression
   23             | expression

   24 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

   25 returnType: type

   26 functionBody: '{' statementList '}'

   27 formalParameters: empty
   28                 | formalParameterList

   29 formalParameterList: formalParameterDef
   30                    | formalParameterList ',' formalParameterDef

   31 formalParameterDef: type IDENTIFIER

   32 $@1: /* empty */

   33 variableDefinition: type $@1 variableList

   34 variableList: variableDeclarations
   35             | variableList ',' variableDeclarations

   36 variableDeclarations: IDENTIFIER '=' expression

   37 expression: expression '+' term
   38           | expression '-' term
   39           | term

   40 term: term '*' power
   41     | term '/' power
   42     | power

   43 power: power '^' unary
   44      | unary

   45 unary: NOT unary
   46      | '-' unary
   47      | atom

   48 atom: IDENTIFIER
   49     | INTEGER
   50     | DOUBLE
   51     | STRING
   52     | NOTHING
   53     | EMPTY
   54     | functCall
   55     | '(' conditionalExpression ')'

   56 empty: /* empty */

   57 type: INTEGER_T
   58     | DOUBLE_T
   59     | STRING_T
   60     | FUNCTION_T
   61     | NOTHING

   62 functCall: IDENTIFIER '(' arguments ')'

   63 arguments: empty
   64          | arglist

   65 arglist: expression
   66        | arglist ',' expression


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 9 24 55 62
')' (41) 6 9 24 55 62
'*' (42) 40
'+' (43) 37
',' (44) 30 35 66
'-' (45) 38 46
'/' (47) 41
':' (58) 24
';' (59) 4 7
'<' (60) 19
'=' (61) 36
'>' (62) 21
'^' (94) 43
'{' (123) 11 26
'}' (125) 11 26
error (256)
FUNCTION (258) 24
INTEGER_T (259) 57
DOUBLE_T (260) 58
STRING_T (261) 59
FUNCTION_T (262) 60
OR (263) 14
AND (264) 16
EQUAL (265) 18
LE (266) 20
GE (267) 22
IF (268) 6
ELSE (269) 8
NOT (270) 45
ELIF (271) 9
IDENTIFIER (272) 24 31 36 48 62
STRING (273) 51
INTEGER (274) 49
DOUBLE (275) 50
NOTHING (276) 52 61
EMPTY (277) 53


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
program (39)
    on left: 1, on right: 0
statementList (40)
    on left: 2 3, on right: 1 3 11 26
statement (41)
    on left: 4 5 6 7, on right: 3 10
elseBlock (42)
    on left: 8 9, on right: 6 9
block (43)
    on left: 10 11, on right: 6 8 9
conditionalExpression (44)
    on left: 12, on right: 6 9 55
orExp (45)
    on left: 13 14, on right: 12 14
andExp (46)
    on left: 15 16, on right: 13 14 16
equality (47)
    on left: 17 18, on right: 15 16 18
relationalOp (48)
    on left: 19 20 21 22 23, on right: 17 18
functionDefinition (49)
    on left: 24, on right: 5
returnType (50)
    on left: 25, on right: 24
functionBody (51)
    on left: 26, on right: 24
formalParameters (52)
    on left: 27 28, on right: 24
formalParameterList (53)
    on left: 29 30, on right: 28 30
formalParameterDef (54)
    on left: 31, on right: 29 30
variableDefinition (55)
    on left: 33, on right: 4
$@1 (56)
    on left: 32, on right: 33
variableList (57)
    on left: 34 35, on right: 33 35
variableDeclarations (58)
    on left: 36, on right: 34 35
expression (59)
    on left: 37 38 39, on right: 7 19 20 21 22 23 36 37 38 65 66
term (60)
    on left: 40 41 42, on right: 37 38 39 40 41
power (61)
    on left: 43 44, on right: 40 41 42 43
unary (62)
    on left: 45 46 47, on right: 43 44 45 46
atom (63)
    on left: 48 49 50 51 52 53 54 55, on right: 47
empty (64)
    on left: 56, on right: 2 27 63
type (65)
    on left: 57 58 59 60 61, on right: 25 31 33
functCall (66)
    on left: 62, on right: 54
arguments (67)
    on left: 63 64, on right: 62
arglist (68)
    on left: 65 66, on right: 64 66


state 0

    0 $accept: . program $end

    $default  reduce using rule 56 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    $default  reduce using rule 1 (program)

    statement           go to state 20
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

   24 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 30


state 6

   57 type: INTEGER_T .

    $default  reduce using rule 57 (type)


state 7

   58 type: DOUBLE_T .

    $default  reduce using rule 58 (type)


state 8

   59 type: STRING_T .

    $default  reduce using rule 59 (type)


state 9

   60 type: FUNCTION_T .

    $default  reduce using rule 60 (type)


state 10

    6 statement: IF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 31


state 11

   45 unary: NOT . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    unary      go to state 33
    atom       go to state 27
    functCall  go to state 29


state 12

   48 atom: IDENTIFIER .
   62 functCall: IDENTIFIER . '(' arguments ')'

    '('  shift, and go to state 34

    $default  reduce using rule 48 (atom)


state 13

   51 atom: STRING .

    $default  reduce using rule 51 (atom)


state 14

   49 atom: INTEGER .

    $default  reduce using rule 49 (atom)


state 15

   50 atom: DOUBLE .

    $default  reduce using rule 50 (atom)


state 16

   52 atom: NOTHING .
   61 type: NOTHING .

    IDENTIFIER  reduce using rule 61 (type)
    $default    reduce using rule 52 (atom)


state 17

   53 atom: EMPTY .

    $default  reduce using rule 53 (atom)


state 18

   55 atom: '(' . conditionalExpression ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    conditionalExpression  go to state 35
    orExp                  go to state 36
    andExp                 go to state 37
    equality               go to state 38
    relationalOp           go to state 39
    expression             go to state 40
    term                   go to state 24
    power                  go to state 25
    unary                  go to state 26
    atom                   go to state 27
    functCall              go to state 29


state 19

   46 unary: '-' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    unary      go to state 41
    atom       go to state 27
    functCall  go to state 29


state 20

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 21

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 22

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 42


state 23

    7 statement: expression . ';'
   37 expression: expression . '+' term
   38           | expression . '-' term

    ';'  shift, and go to state 43
    '+'  shift, and go to state 44
    '-'  shift, and go to state 45


state 24

   39 expression: term .
   40 term: term . '*' power
   41     | term . '/' power

    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 39 (expression)


state 25

   42 term: power .
   43 power: power . '^' unary

    '^'  shift, and go to state 48

    $default  reduce using rule 42 (term)


state 26

   44 power: unary .

    $default  reduce using rule 44 (power)


state 27

   47 unary: atom .

    $default  reduce using rule 47 (unary)


state 28

   33 variableDefinition: type . $@1 variableList

    $default  reduce using rule 32 ($@1)

    $@1  go to state 49


state 29

   54 atom: functCall .

    $default  reduce using rule 54 (atom)


state 30

   24 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 50


state 31

    6 statement: IF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    conditionalExpression  go to state 51
    orExp                  go to state 36
    andExp                 go to state 37
    equality               go to state 38
    relationalOp           go to state 39
    expression             go to state 40
    term                   go to state 24
    power                  go to state 25
    unary                  go to state 26
    atom                   go to state 27
    functCall              go to state 29


state 32

   52 atom: NOTHING .

    $default  reduce using rule 52 (atom)


state 33

   45 unary: NOT unary .

    $default  reduce using rule 45 (unary)


state 34

   62 functCall: IDENTIFIER '(' . arguments ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    $default  reduce using rule 56 (empty)

    expression  go to state 52
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    empty       go to state 53
    functCall   go to state 29
    arguments   go to state 54
    arglist     go to state 55


state 35

   55 atom: '(' conditionalExpression . ')'

    ')'  shift, and go to state 56


state 36

   12 conditionalExpression: orExp .
   14 orExp: orExp . OR andExp

    OR  shift, and go to state 57

    $default  reduce using rule 12 (conditionalExpression)


state 37

   13 orExp: andExp .
   16 andExp: andExp . AND equality

    AND  shift, and go to state 58

    $default  reduce using rule 13 (orExp)


state 38

   15 andExp: equality .
   18 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 59

    $default  reduce using rule 15 (andExp)


state 39

   17 equality: relationalOp .

    $default  reduce using rule 17 (equality)


state 40

   19 relationalOp: expression . '<' expression
   20             | expression . LE expression
   21             | expression . '>' expression
   22             | expression . GE expression
   23             | expression .
   37 expression: expression . '+' term
   38           | expression . '-' term

    LE   shift, and go to state 60
    GE   shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 23 (relationalOp)


state 41

   46 unary: '-' unary .

    $default  reduce using rule 46 (unary)


state 42

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 43

    7 statement: expression ';' .

    $default  reduce using rule 7 (statement)


state 44

   37 expression: expression '+' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    term       go to state 64
    power      go to state 25
    unary      go to state 26
    atom       go to state 27
    functCall  go to state 29


state 45

   38 expression: expression '-' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    term       go to state 65
    power      go to state 25
    unary      go to state 26
    atom       go to state 27
    functCall  go to state 29


state 46

   40 term: term '*' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    power      go to state 66
    unary      go to state 26
    atom       go to state 27
    functCall  go to state 29


state 47

   41 term: term '/' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    power      go to state 67
    unary      go to state 26
    atom       go to state 27
    functCall  go to state 29


state 48

   43 power: power '^' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    unary      go to state 68
    atom       go to state 27
    functCall  go to state 29


state 49

   33 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 69

    variableList          go to state 70
    variableDeclarations  go to state 71


state 50

   24 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 72

    $default  reduce using rule 56 (empty)

    formalParameters     go to state 73
    formalParameterList  go to state 74
    formalParameterDef   go to state 75
    empty                go to state 76
    type                 go to state 77


state 51

    6 statement: IF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 78


state 52

   37 expression: expression . '+' term
   38           | expression . '-' term
   65 arglist: expression .

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 65 (arglist)


state 53

   63 arguments: empty .

    $default  reduce using rule 63 (arguments)


state 54

   62 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 79


state 55

   64 arguments: arglist .
   66 arglist: arglist . ',' expression

    ','  shift, and go to state 80

    $default  reduce using rule 64 (arguments)


state 56

   55 atom: '(' conditionalExpression ')' .

    $default  reduce using rule 55 (atom)


state 57

   14 orExp: orExp OR . andExp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    andExp        go to state 81
    equality      go to state 38
    relationalOp  go to state 39
    expression    go to state 40
    term          go to state 24
    power         go to state 25
    unary         go to state 26
    atom          go to state 27
    functCall     go to state 29


state 58

   16 andExp: andExp AND . equality

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    equality      go to state 82
    relationalOp  go to state 39
    expression    go to state 40
    term          go to state 24
    power         go to state 25
    unary         go to state 26
    atom          go to state 27
    functCall     go to state 29


state 59

   18 equality: equality EQUAL . relationalOp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    relationalOp  go to state 83
    expression    go to state 40
    term          go to state 24
    power         go to state 25
    unary         go to state 26
    atom          go to state 27
    functCall     go to state 29


state 60

   20 relationalOp: expression LE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 84
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 61

   22 relationalOp: expression GE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 85
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 62

   19 relationalOp: expression '<' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 86
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 63

   21 relationalOp: expression '>' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 87
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 64

   37 expression: expression '+' term .
   40 term: term . '*' power
   41     | term . '/' power

    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 37 (expression)


state 65

   38 expression: expression '-' term .
   40 term: term . '*' power
   41     | term . '/' power

    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 38 (expression)


state 66

   40 term: term '*' power .
   43 power: power . '^' unary

    '^'  shift, and go to state 48

    $default  reduce using rule 40 (term)


state 67

   41 term: term '/' power .
   43 power: power . '^' unary

    '^'  shift, and go to state 48

    $default  reduce using rule 41 (term)


state 68

   43 power: power '^' unary .

    $default  reduce using rule 43 (power)


state 69

   36 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 88


state 70

   33 variableDefinition: type $@1 variableList .
   35 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 89

    $default  reduce using rule 33 (variableDefinition)


state 71

   34 variableList: variableDeclarations .

    $default  reduce using rule 34 (variableList)


state 72

   61 type: NOTHING .

    $default  reduce using rule 61 (type)


state 73

   24 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 90


state 74

   28 formalParameters: formalParameterList .
   30 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 91

    $default  reduce using rule 28 (formalParameters)


state 75

   29 formalParameterList: formalParameterDef .

    $default  reduce using rule 29 (formalParameterList)


state 76

   27 formalParameters: empty .

    $default  reduce using rule 27 (formalParameters)


state 77

   31 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 92


state 78

    6 statement: IF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '{'         shift, and go to state 93
    '-'         shift, and go to state 19

    statement           go to state 94
    block               go to state 95
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 79

   62 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 62 (functCall)


state 80

   66 arglist: arglist ',' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 96
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 81

   14 orExp: orExp OR andExp .
   16 andExp: andExp . AND equality

    AND  shift, and go to state 58

    $default  reduce using rule 14 (orExp)


state 82

   16 andExp: andExp AND equality .
   18 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 59

    $default  reduce using rule 16 (andExp)


state 83

   18 equality: equality EQUAL relationalOp .

    $default  reduce using rule 18 (equality)


state 84

   20 relationalOp: expression LE expression .
   37 expression: expression . '+' term
   38           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 20 (relationalOp)


state 85

   22 relationalOp: expression GE expression .
   37 expression: expression . '+' term
   38           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 22 (relationalOp)


state 86

   19 relationalOp: expression '<' expression .
   37 expression: expression . '+' term
   38           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 19 (relationalOp)


state 87

   21 relationalOp: expression '>' expression .
   37 expression: expression . '+' term
   38           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 21 (relationalOp)


state 88

   36 variableDeclarations: IDENTIFIER '=' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 97
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 89

   35 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 69

    variableDeclarations  go to state 98


state 90

   24 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 99


state 91

   30 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 72

    formalParameterDef  go to state 100
    type                go to state 77


state 92

   31 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 31 (formalParameterDef)


state 93

   11 block: '{' . statementList '}'

    $default  reduce using rule 56 (empty)

    statementList  go to state 101
    empty          go to state 3


state 94

   10 block: statement .

    $default  reduce using rule 10 (block)


state 95

    6 statement: IF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 102
    ELIF  shift, and go to state 103

    elseBlock  go to state 104


state 96

   37 expression: expression . '+' term
   38           | expression . '-' term
   66 arglist: arglist ',' expression .

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 66 (arglist)


state 97

   36 variableDeclarations: IDENTIFIER '=' expression .
   37 expression: expression . '+' term
   38           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 36 (variableDeclarations)


state 98

   35 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 35 (variableList)


state 99

   24 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 72

    returnType  go to state 105
    type        go to state 106


state 100

   30 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 30 (formalParameterList)


state 101

    3 statementList: statementList . statement
   11 block: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '}'         shift, and go to state 107
    '-'         shift, and go to state 19

    statement           go to state 20
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 102

    8 elseBlock: ELSE . block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '{'         shift, and go to state 93
    '-'         shift, and go to state 19

    statement           go to state 94
    block               go to state 108
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 103

    9 elseBlock: ELIF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 109


state 104

    6 statement: IF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 6 (statement)


state 105

   24 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 110

    functionBody  go to state 111


state 106

   25 returnType: type .

    $default  reduce using rule 25 (returnType)


state 107

   11 block: '{' statementList '}' .

    $default  reduce using rule 11 (block)


state 108

    8 elseBlock: ELSE block .

    $default  reduce using rule 8 (elseBlock)


state 109

    9 elseBlock: ELIF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    conditionalExpression  go to state 112
    orExp                  go to state 36
    andExp                 go to state 37
    equality               go to state 38
    relationalOp           go to state 39
    expression             go to state 40
    term                   go to state 24
    power                  go to state 25
    unary                  go to state 26
    atom                   go to state 27
    functCall              go to state 29


state 110

   26 functionBody: '{' . statementList '}'

    $default  reduce using rule 56 (empty)

    statementList  go to state 113
    empty          go to state 3


state 111

   24 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 24 (functionDefinition)


state 112

    9 elseBlock: ELIF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 114


state 113

    3 statementList: statementList . statement
   26 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '}'         shift, and go to state 115
    '-'         shift, and go to state 19

    statement           go to state 20
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 114

    9 elseBlock: ELIF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '{'         shift, and go to state 93
    '-'         shift, and go to state 19

    statement           go to state 94
    block               go to state 116
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 115

   26 functionBody: '{' statementList '}' .

    $default  reduce using rule 26 (functionBody)


state 116

    9 elseBlock: ELIF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 102
    ELIF  shift, and go to state 103

    elseBlock  go to state 117


state 117

    9 elseBlock: ELIF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 9 (elseBlock)
