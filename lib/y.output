Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | IF '(' conditionalExpression ')' block elseBlock
    7          | RETURN expression ';'
    8          | expression ';'

    9 elseBlock: ELSE block
   10          | ELIF '(' conditionalExpression ')' block elseBlock

   11 block: statement
   12      | '{' statementList '}'

   13 conditionalExpression: orExp

   14 orExp: andExp
   15      | orExp OR andExp

   16 andExp: equality
   17       | andExp AND equality

   18 equality: relationalOp
   19         | equality EQUAL relationalOp

   20 relationalOp: expression '<' expression
   21             | expression LE expression
   22             | expression '>' expression
   23             | expression GE expression
   24             | expression

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

   26 returnType: type

   27 functionBody: '{' statementList '}'

   28 formalParameters: empty
   29                 | formalParameterList

   30 formalParameterList: formalParameterDef
   31                    | formalParameterList ',' formalParameterDef

   32 formalParameterDef: type IDENTIFIER

   33 $@1: /* empty */

   34 variableDefinition: type $@1 variableList

   35 variableList: variableDeclarations
   36             | variableList ',' variableDeclarations

   37 variableDeclarations: IDENTIFIER '=' expression

   38 expression: expression '+' term
   39           | expression '-' term
   40           | term

   41 term: term '*' power
   42     | term '/' power
   43     | power

   44 power: power '^' unary
   45      | unary

   46 unary: NOT unary
   47      | '-' unary
   48      | atom

   49 atom: IDENTIFIER
   50     | INTEGER
   51     | DOUBLE
   52     | STRING
   53     | NOTHING
   54     | EMPTY
   55     | functCall
   56     | '(' conditionalExpression ')'

   57 empty: /* empty */

   58 type: INTEGER_T
   59     | DOUBLE_T
   60     | STRING_T
   61     | FUNCTION_T
   62     | NOTHING

   63 functCall: IDENTIFIER '(' arguments ')'

   64 arguments: empty
   65          | arglist

   66 arglist: expression
   67        | arglist ',' expression


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 10 25 56 63
')' (41) 6 10 25 56 63
'*' (42) 41
'+' (43) 38
',' (44) 31 36 67
'-' (45) 39 47
'/' (47) 42
':' (58) 25
';' (59) 4 7 8
'<' (60) 20
'=' (61) 37
'>' (62) 22
'^' (94) 44
'{' (123) 12 27
'}' (125) 12 27
error (256)
FUNCTION (258) 25
INTEGER_T (259) 58
DOUBLE_T (260) 59
STRING_T (261) 60
FUNCTION_T (262) 61
OR (263) 15
AND (264) 17
EQUAL (265) 19
LE (266) 21
GE (267) 23
IF (268) 6
ELSE (269) 9
NOT (270) 46
ELIF (271) 10
RETURN (272) 7
IDENTIFIER (273) 25 32 37 49 63
STRING (274) 52
INTEGER (275) 50
DOUBLE (276) 51
NOTHING (277) 53 62
EMPTY (278) 54


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
program (40)
    on left: 1, on right: 0
statementList (41)
    on left: 2 3, on right: 1 3 12 27
statement (42)
    on left: 4 5 6 7 8, on right: 3 11
elseBlock (43)
    on left: 9 10, on right: 6 10
block (44)
    on left: 11 12, on right: 6 9 10
conditionalExpression (45)
    on left: 13, on right: 6 10 56
orExp (46)
    on left: 14 15, on right: 13 15
andExp (47)
    on left: 16 17, on right: 14 15 17
equality (48)
    on left: 18 19, on right: 16 17 19
relationalOp (49)
    on left: 20 21 22 23 24, on right: 18 19
functionDefinition (50)
    on left: 25, on right: 5
returnType (51)
    on left: 26, on right: 25
functionBody (52)
    on left: 27, on right: 25
formalParameters (53)
    on left: 28 29, on right: 25
formalParameterList (54)
    on left: 30 31, on right: 29 31
formalParameterDef (55)
    on left: 32, on right: 30 31
variableDefinition (56)
    on left: 34, on right: 4
$@1 (57)
    on left: 33, on right: 34
variableList (58)
    on left: 35 36, on right: 34 36
variableDeclarations (59)
    on left: 37, on right: 35 36
expression (60)
    on left: 38 39 40, on right: 7 8 20 21 22 23 24 37 38 39 66 67
term (61)
    on left: 41 42 43, on right: 38 39 40 41 42
power (62)
    on left: 44 45, on right: 41 42 43 44
unary (63)
    on left: 46 47 48, on right: 44 45 46 47
atom (64)
    on left: 49 50 51 52 53 54 55 56, on right: 48
empty (65)
    on left: 57, on right: 2 28 64
type (66)
    on left: 58 59 60 61 62, on right: 26 32 34
functCall (67)
    on left: 63, on right: 55
arguments (68)
    on left: 64 65, on right: 63
arglist (69)
    on left: 66 67, on right: 65 67


state 0

    0 $accept: . program $end

    $default  reduce using rule 57 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    $default  reduce using rule 1 (program)

    statement           go to state 21
    functionDefinition  go to state 22
    variableDefinition  go to state 23
    expression          go to state 24
    term                go to state 25
    power               go to state 26
    unary               go to state 27
    atom                go to state 28
    type                go to state 29
    functCall           go to state 30


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

   25 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 31


state 6

   58 type: INTEGER_T .

    $default  reduce using rule 58 (type)


state 7

   59 type: DOUBLE_T .

    $default  reduce using rule 59 (type)


state 8

   60 type: STRING_T .

    $default  reduce using rule 60 (type)


state 9

   61 type: FUNCTION_T .

    $default  reduce using rule 61 (type)


state 10

    6 statement: IF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 32


state 11

   46 unary: NOT . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    unary      go to state 34
    atom       go to state 28
    functCall  go to state 30


state 12

    7 statement: RETURN . expression ';'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    expression  go to state 35
    term        go to state 25
    power       go to state 26
    unary       go to state 27
    atom        go to state 28
    functCall   go to state 30


state 13

   49 atom: IDENTIFIER .
   63 functCall: IDENTIFIER . '(' arguments ')'

    '('  shift, and go to state 36

    $default  reduce using rule 49 (atom)


state 14

   52 atom: STRING .

    $default  reduce using rule 52 (atom)


state 15

   50 atom: INTEGER .

    $default  reduce using rule 50 (atom)


state 16

   51 atom: DOUBLE .

    $default  reduce using rule 51 (atom)


state 17

   53 atom: NOTHING .
   62 type: NOTHING .

    IDENTIFIER  reduce using rule 62 (type)
    $default    reduce using rule 53 (atom)


state 18

   54 atom: EMPTY .

    $default  reduce using rule 54 (atom)


state 19

   56 atom: '(' . conditionalExpression ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    conditionalExpression  go to state 37
    orExp                  go to state 38
    andExp                 go to state 39
    equality               go to state 40
    relationalOp           go to state 41
    expression             go to state 42
    term                   go to state 25
    power                  go to state 26
    unary                  go to state 27
    atom                   go to state 28
    functCall              go to state 30


state 20

   47 unary: '-' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    unary      go to state 43
    atom       go to state 28
    functCall  go to state 30


state 21

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 22

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 23

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 44


state 24

    8 statement: expression . ';'
   38 expression: expression . '+' term
   39           | expression . '-' term

    ';'  shift, and go to state 45
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47


state 25

   40 expression: term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 48
    '/'  shift, and go to state 49

    $default  reduce using rule 40 (expression)


state 26

   43 term: power .
   44 power: power . '^' unary

    '^'  shift, and go to state 50

    $default  reduce using rule 43 (term)


state 27

   45 power: unary .

    $default  reduce using rule 45 (power)


state 28

   48 unary: atom .

    $default  reduce using rule 48 (unary)


state 29

   34 variableDefinition: type . $@1 variableList

    $default  reduce using rule 33 ($@1)

    $@1  go to state 51


state 30

   55 atom: functCall .

    $default  reduce using rule 55 (atom)


state 31

   25 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 52


state 32

    6 statement: IF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    conditionalExpression  go to state 53
    orExp                  go to state 38
    andExp                 go to state 39
    equality               go to state 40
    relationalOp           go to state 41
    expression             go to state 42
    term                   go to state 25
    power                  go to state 26
    unary                  go to state 27
    atom                   go to state 28
    functCall              go to state 30


state 33

   53 atom: NOTHING .

    $default  reduce using rule 53 (atom)


state 34

   46 unary: NOT unary .

    $default  reduce using rule 46 (unary)


state 35

    7 statement: RETURN expression . ';'
   38 expression: expression . '+' term
   39           | expression . '-' term

    ';'  shift, and go to state 54
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47


state 36

   63 functCall: IDENTIFIER '(' . arguments ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    $default  reduce using rule 57 (empty)

    expression  go to state 55
    term        go to state 25
    power       go to state 26
    unary       go to state 27
    atom        go to state 28
    empty       go to state 56
    functCall   go to state 30
    arguments   go to state 57
    arglist     go to state 58


state 37

   56 atom: '(' conditionalExpression . ')'

    ')'  shift, and go to state 59


state 38

   13 conditionalExpression: orExp .
   15 orExp: orExp . OR andExp

    OR  shift, and go to state 60

    $default  reduce using rule 13 (conditionalExpression)


state 39

   14 orExp: andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 61

    $default  reduce using rule 14 (orExp)


state 40

   16 andExp: equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 62

    $default  reduce using rule 16 (andExp)


state 41

   18 equality: relationalOp .

    $default  reduce using rule 18 (equality)


state 42

   20 relationalOp: expression . '<' expression
   21             | expression . LE expression
   22             | expression . '>' expression
   23             | expression . GE expression
   24             | expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    LE   shift, and go to state 63
    GE   shift, and go to state 64
    '<'  shift, and go to state 65
    '>'  shift, and go to state 66
    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    $default  reduce using rule 24 (relationalOp)


state 43

   47 unary: '-' unary .

    $default  reduce using rule 47 (unary)


state 44

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 45

    8 statement: expression ';' .

    $default  reduce using rule 8 (statement)


state 46

   38 expression: expression '+' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    term       go to state 67
    power      go to state 26
    unary      go to state 27
    atom       go to state 28
    functCall  go to state 30


state 47

   39 expression: expression '-' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    term       go to state 68
    power      go to state 26
    unary      go to state 27
    atom       go to state 28
    functCall  go to state 30


state 48

   41 term: term '*' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    power      go to state 69
    unary      go to state 27
    atom       go to state 28
    functCall  go to state 30


state 49

   42 term: term '/' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    power      go to state 70
    unary      go to state 27
    atom       go to state 28
    functCall  go to state 30


state 50

   44 power: power '^' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    unary      go to state 71
    atom       go to state 28
    functCall  go to state 30


state 51

   34 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 72

    variableList          go to state 73
    variableDeclarations  go to state 74


state 52

   25 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 75

    $default  reduce using rule 57 (empty)

    formalParameters     go to state 76
    formalParameterList  go to state 77
    formalParameterDef   go to state 78
    empty                go to state 79
    type                 go to state 80


state 53

    6 statement: IF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 81


state 54

    7 statement: RETURN expression ';' .

    $default  reduce using rule 7 (statement)


state 55

   38 expression: expression . '+' term
   39           | expression . '-' term
   66 arglist: expression .

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    $default  reduce using rule 66 (arglist)


state 56

   64 arguments: empty .

    $default  reduce using rule 64 (arguments)


state 57

   63 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 82


state 58

   65 arguments: arglist .
   67 arglist: arglist . ',' expression

    ','  shift, and go to state 83

    $default  reduce using rule 65 (arguments)


state 59

   56 atom: '(' conditionalExpression ')' .

    $default  reduce using rule 56 (atom)


state 60

   15 orExp: orExp OR . andExp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    andExp        go to state 84
    equality      go to state 40
    relationalOp  go to state 41
    expression    go to state 42
    term          go to state 25
    power         go to state 26
    unary         go to state 27
    atom          go to state 28
    functCall     go to state 30


state 61

   17 andExp: andExp AND . equality

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    equality      go to state 85
    relationalOp  go to state 41
    expression    go to state 42
    term          go to state 25
    power         go to state 26
    unary         go to state 27
    atom          go to state 28
    functCall     go to state 30


state 62

   19 equality: equality EQUAL . relationalOp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    relationalOp  go to state 86
    expression    go to state 42
    term          go to state 25
    power         go to state 26
    unary         go to state 27
    atom          go to state 28
    functCall     go to state 30


state 63

   21 relationalOp: expression LE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    expression  go to state 87
    term        go to state 25
    power       go to state 26
    unary       go to state 27
    atom        go to state 28
    functCall   go to state 30


state 64

   23 relationalOp: expression GE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    expression  go to state 88
    term        go to state 25
    power       go to state 26
    unary       go to state 27
    atom        go to state 28
    functCall   go to state 30


state 65

   20 relationalOp: expression '<' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    expression  go to state 89
    term        go to state 25
    power       go to state 26
    unary       go to state 27
    atom        go to state 28
    functCall   go to state 30


state 66

   22 relationalOp: expression '>' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    expression  go to state 90
    term        go to state 25
    power       go to state 26
    unary       go to state 27
    atom        go to state 28
    functCall   go to state 30


state 67

   38 expression: expression '+' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 48
    '/'  shift, and go to state 49

    $default  reduce using rule 38 (expression)


state 68

   39 expression: expression '-' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 48
    '/'  shift, and go to state 49

    $default  reduce using rule 39 (expression)


state 69

   41 term: term '*' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 50

    $default  reduce using rule 41 (term)


state 70

   42 term: term '/' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 50

    $default  reduce using rule 42 (term)


state 71

   44 power: power '^' unary .

    $default  reduce using rule 44 (power)


state 72

   37 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 91


state 73

   34 variableDefinition: type $@1 variableList .
   36 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 92

    $default  reduce using rule 34 (variableDefinition)


state 74

   35 variableList: variableDeclarations .

    $default  reduce using rule 35 (variableList)


state 75

   62 type: NOTHING .

    $default  reduce using rule 62 (type)


state 76

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 93


state 77

   29 formalParameters: formalParameterList .
   31 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 94

    $default  reduce using rule 29 (formalParameters)


state 78

   30 formalParameterList: formalParameterDef .

    $default  reduce using rule 30 (formalParameterList)


state 79

   28 formalParameters: empty .

    $default  reduce using rule 28 (formalParameters)


state 80

   32 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 95


state 81

    6 statement: IF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 96
    '-'         shift, and go to state 20

    statement           go to state 97
    block               go to state 98
    functionDefinition  go to state 22
    variableDefinition  go to state 23
    expression          go to state 24
    term                go to state 25
    power               go to state 26
    unary               go to state 27
    atom                go to state 28
    type                go to state 29
    functCall           go to state 30


state 82

   63 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 63 (functCall)


state 83

   67 arglist: arglist ',' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    expression  go to state 99
    term        go to state 25
    power       go to state 26
    unary       go to state 27
    atom        go to state 28
    functCall   go to state 30


state 84

   15 orExp: orExp OR andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 61

    $default  reduce using rule 15 (orExp)


state 85

   17 andExp: andExp AND equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 62

    $default  reduce using rule 17 (andExp)


state 86

   19 equality: equality EQUAL relationalOp .

    $default  reduce using rule 19 (equality)


state 87

   21 relationalOp: expression LE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    $default  reduce using rule 21 (relationalOp)


state 88

   23 relationalOp: expression GE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    $default  reduce using rule 23 (relationalOp)


state 89

   20 relationalOp: expression '<' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    $default  reduce using rule 20 (relationalOp)


state 90

   22 relationalOp: expression '>' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    $default  reduce using rule 22 (relationalOp)


state 91

   37 variableDeclarations: IDENTIFIER '=' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    expression  go to state 100
    term        go to state 25
    power       go to state 26
    unary       go to state 27
    atom        go to state 28
    functCall   go to state 30


state 92

   36 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 72

    variableDeclarations  go to state 101


state 93

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 102


state 94

   31 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 75

    formalParameterDef  go to state 103
    type                go to state 80


state 95

   32 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 32 (formalParameterDef)


state 96

   12 block: '{' . statementList '}'

    $default  reduce using rule 57 (empty)

    statementList  go to state 104
    empty          go to state 3


state 97

   11 block: statement .

    $default  reduce using rule 11 (block)


state 98

    6 statement: IF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 105
    ELIF  shift, and go to state 106

    elseBlock  go to state 107


state 99

   38 expression: expression . '+' term
   39           | expression . '-' term
   67 arglist: arglist ',' expression .

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    $default  reduce using rule 67 (arglist)


state 100

   37 variableDeclarations: IDENTIFIER '=' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47

    $default  reduce using rule 37 (variableDeclarations)


state 101

   36 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 36 (variableList)


state 102

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 75

    returnType  go to state 108
    type        go to state 109


state 103

   31 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 31 (formalParameterList)


state 104

    3 statementList: statementList . statement
   12 block: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '}'         shift, and go to state 110
    '-'         shift, and go to state 20

    statement           go to state 21
    functionDefinition  go to state 22
    variableDefinition  go to state 23
    expression          go to state 24
    term                go to state 25
    power               go to state 26
    unary               go to state 27
    atom                go to state 28
    type                go to state 29
    functCall           go to state 30


state 105

    9 elseBlock: ELSE . block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 96
    '-'         shift, and go to state 20

    statement           go to state 97
    block               go to state 111
    functionDefinition  go to state 22
    variableDefinition  go to state 23
    expression          go to state 24
    term                go to state 25
    power               go to state 26
    unary               go to state 27
    atom                go to state 28
    type                go to state 29
    functCall           go to state 30


state 106

   10 elseBlock: ELIF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 112


state 107

    6 statement: IF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 6 (statement)


state 108

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 113

    functionBody  go to state 114


state 109

   26 returnType: type .

    $default  reduce using rule 26 (returnType)


state 110

   12 block: '{' statementList '}' .

    $default  reduce using rule 12 (block)


state 111

    9 elseBlock: ELSE block .

    $default  reduce using rule 9 (elseBlock)


state 112

   10 elseBlock: ELIF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 33
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20

    conditionalExpression  go to state 115
    orExp                  go to state 38
    andExp                 go to state 39
    equality               go to state 40
    relationalOp           go to state 41
    expression             go to state 42
    term                   go to state 25
    power                  go to state 26
    unary                  go to state 27
    atom                   go to state 28
    functCall              go to state 30


state 113

   27 functionBody: '{' . statementList '}'

    $default  reduce using rule 57 (empty)

    statementList  go to state 116
    empty          go to state 3


state 114

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 25 (functionDefinition)


state 115

   10 elseBlock: ELIF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 117


state 116

    3 statementList: statementList . statement
   27 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '}'         shift, and go to state 118
    '-'         shift, and go to state 20

    statement           go to state 21
    functionDefinition  go to state 22
    variableDefinition  go to state 23
    expression          go to state 24
    term                go to state 25
    power               go to state 26
    unary               go to state 27
    atom                go to state 28
    type                go to state 29
    functCall           go to state 30


state 117

   10 elseBlock: ELIF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 96
    '-'         shift, and go to state 20

    statement           go to state 97
    block               go to state 119
    functionDefinition  go to state 22
    variableDefinition  go to state 23
    expression          go to state 24
    term                go to state 25
    power               go to state 26
    unary               go to state 27
    atom                go to state 28
    type                go to state 29
    functCall           go to state 30


state 118

   27 functionBody: '{' statementList '}' .

    $default  reduce using rule 27 (functionBody)


state 119

   10 elseBlock: ELIF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 105
    ELIF  shift, and go to state 106

    elseBlock  go to state 120


state 120

   10 elseBlock: ELIF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 10 (elseBlock)
