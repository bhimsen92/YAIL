Terminals unused in grammar

   ARRAY_T


Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | IF '(' conditionalExpression ')' block elseBlock
    7          | RETURN expression ';'
    8          | expression ';'

    9 elseBlock: ELSE block
   10          | ELIF '(' conditionalExpression ')' block elseBlock

   11 block: statement
   12      | '{' statementList '}'

   13 conditionalExpression: orExp

   14 orExp: andExp
   15      | orExp OR andExp

   16 andExp: equality
   17       | andExp AND equality

   18 equality: relationalOp
   19         | equality EQUAL relationalOp

   20 relationalOp: expression '<' expression
   21             | expression LE expression
   22             | expression '>' expression
   23             | expression GE expression
   24             | expression

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

   26 returnType: type

   27 functionBody: '{' statementList '}'

   28 formalParameters: empty
   29                 | formalParameterList

   30 formalParameterList: formalParameterDef
   31                    | formalParameterList ',' formalParameterDef

   32 formalParameterDef: type IDENTIFIER

   33 $@1: /* empty */

   34 variableDefinition: type $@1 variableList

   35 variableList: variableDeclarations
   36             | variableList ',' variableDeclarations

   37 variableDeclarations: IDENTIFIER '=' expression

   38 expression: expression '+' term
   39           | expression '-' term
   40           | term

   41 term: term '*' power
   42     | term '/' power
   43     | power

   44 power: power '^' unary
   45      | unary

   46 unary: NOT unary
   47      | '-' unary
   48      | atom

   49 atom: IDENTIFIER
   50     | INTEGER
   51     | DOUBLE
   52     | STRING
   53     | NOTHING
   54     | EMPTY
   55     | functCall
   56     | list
   57     | indexOp
   58     | '(' conditionalExpression ')'

   59 empty: /* empty */

   60 type: INTEGER_T
   61     | DOUBLE_T
   62     | STRING_T
   63     | FUNCTION_T
   64     | NOTHING
   65     | INTEGER_T '[' ']'

   66 functCall: IDENTIFIER '(' arguments ')'

   67 arguments: empty
   68          | arglist

   69 arglist: expression
   70        | arglist ',' expression

   71 list: '[' valueList ']'

   72 valueList: empty
   73          | expression
   74          | valueList ',' expression

   75 indexOp: IDENTIFIER '[' expression ']'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 10 25 58 66
')' (41) 6 10 25 58 66
'*' (42) 41
'+' (43) 38
',' (44) 31 36 70 74
'-' (45) 39 47
'/' (47) 42
':' (58) 25
';' (59) 4 7 8
'<' (60) 20
'=' (61) 37
'>' (62) 22
'[' (91) 65 71 75
']' (93) 65 71 75
'^' (94) 44
'{' (123) 12 27
'}' (125) 12 27
error (256)
FUNCTION (258) 25
INTEGER_T (259) 60 65
DOUBLE_T (260) 61
STRING_T (261) 62
FUNCTION_T (262) 63
OR (263) 15
AND (264) 17
EQUAL (265) 19
LE (266) 21
GE (267) 23
IF (268) 6
ELSE (269) 9
NOT (270) 46
ELIF (271) 10
RETURN (272) 7
ARRAY_T (273)
IDENTIFIER (274) 25 32 37 49 66 75
STRING (275) 52
INTEGER (276) 50
DOUBLE (277) 51
NOTHING (278) 53 64
EMPTY (279) 54


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
program (43)
    on left: 1, on right: 0
statementList (44)
    on left: 2 3, on right: 1 3 12 27
statement (45)
    on left: 4 5 6 7 8, on right: 3 11
elseBlock (46)
    on left: 9 10, on right: 6 10
block (47)
    on left: 11 12, on right: 6 9 10
conditionalExpression (48)
    on left: 13, on right: 6 10 58
orExp (49)
    on left: 14 15, on right: 13 15
andExp (50)
    on left: 16 17, on right: 14 15 17
equality (51)
    on left: 18 19, on right: 16 17 19
relationalOp (52)
    on left: 20 21 22 23 24, on right: 18 19
functionDefinition (53)
    on left: 25, on right: 5
returnType (54)
    on left: 26, on right: 25
functionBody (55)
    on left: 27, on right: 25
formalParameters (56)
    on left: 28 29, on right: 25
formalParameterList (57)
    on left: 30 31, on right: 29 31
formalParameterDef (58)
    on left: 32, on right: 30 31
variableDefinition (59)
    on left: 34, on right: 4
$@1 (60)
    on left: 33, on right: 34
variableList (61)
    on left: 35 36, on right: 34 36
variableDeclarations (62)
    on left: 37, on right: 35 36
expression (63)
    on left: 38 39 40, on right: 7 8 20 21 22 23 24 37 38 39 69 70
    73 74 75
term (64)
    on left: 41 42 43, on right: 38 39 40 41 42
power (65)
    on left: 44 45, on right: 41 42 43 44
unary (66)
    on left: 46 47 48, on right: 44 45 46 47
atom (67)
    on left: 49 50 51 52 53 54 55 56 57 58, on right: 48
empty (68)
    on left: 59, on right: 2 28 67 72
type (69)
    on left: 60 61 62 63 64 65, on right: 26 32 34
functCall (70)
    on left: 66, on right: 55
arguments (71)
    on left: 67 68, on right: 66
arglist (72)
    on left: 69 70, on right: 68 70
list (73)
    on left: 71, on right: 56
valueList (74)
    on left: 72 73 74, on right: 71 74
indexOp (75)
    on left: 75, on right: 57


state 0

    0 $accept: . program $end

    $default  reduce using rule 59 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    $default  reduce using rule 1 (program)

    statement           go to state 22
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

   25 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 34


state 6

   60 type: INTEGER_T .
   65     | INTEGER_T . '[' ']'

    '['  shift, and go to state 35

    $default  reduce using rule 60 (type)


state 7

   61 type: DOUBLE_T .

    $default  reduce using rule 61 (type)


state 8

   62 type: STRING_T .

    $default  reduce using rule 62 (type)


state 9

   63 type: FUNCTION_T .

    $default  reduce using rule 63 (type)


state 10

    6 statement: IF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 36


state 11

   46 unary: NOT . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    unary      go to state 38
    atom       go to state 29
    functCall  go to state 31
    list       go to state 32
    indexOp    go to state 33


state 12

    7 statement: RETURN . expression ';'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression  go to state 39
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    functCall   go to state 31
    list        go to state 32
    indexOp     go to state 33


state 13

   49 atom: IDENTIFIER .
   66 functCall: IDENTIFIER . '(' arguments ')'
   75 indexOp: IDENTIFIER . '[' expression ']'

    '('  shift, and go to state 40
    '['  shift, and go to state 41

    $default  reduce using rule 49 (atom)


state 14

   52 atom: STRING .

    $default  reduce using rule 52 (atom)


state 15

   50 atom: INTEGER .

    $default  reduce using rule 50 (atom)


state 16

   51 atom: DOUBLE .

    $default  reduce using rule 51 (atom)


state 17

   53 atom: NOTHING .
   64 type: NOTHING .

    IDENTIFIER  reduce using rule 64 (type)
    $default    reduce using rule 53 (atom)


state 18

   54 atom: EMPTY .

    $default  reduce using rule 54 (atom)


state 19

   58 atom: '(' . conditionalExpression ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    conditionalExpression  go to state 42
    orExp                  go to state 43
    andExp                 go to state 44
    equality               go to state 45
    relationalOp           go to state 46
    expression             go to state 47
    term                   go to state 26
    power                  go to state 27
    unary                  go to state 28
    atom                   go to state 29
    functCall              go to state 31
    list                   go to state 32
    indexOp                go to state 33


state 20

   47 unary: '-' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    unary      go to state 48
    atom       go to state 29
    functCall  go to state 31
    list       go to state 32
    indexOp    go to state 33


state 21

   71 list: '[' . valueList ']'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    $default  reduce using rule 59 (empty)

    expression  go to state 49
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    empty       go to state 50
    functCall   go to state 31
    list        go to state 32
    valueList   go to state 51
    indexOp     go to state 33


state 22

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 23

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 24

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 52


state 25

    8 statement: expression . ';'
   38 expression: expression . '+' term
   39           | expression . '-' term

    ';'  shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55


state 26

   40 expression: term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    $default  reduce using rule 40 (expression)


state 27

   43 term: power .
   44 power: power . '^' unary

    '^'  shift, and go to state 58

    $default  reduce using rule 43 (term)


state 28

   45 power: unary .

    $default  reduce using rule 45 (power)


state 29

   48 unary: atom .

    $default  reduce using rule 48 (unary)


state 30

   34 variableDefinition: type . $@1 variableList

    $default  reduce using rule 33 ($@1)

    $@1  go to state 59


state 31

   55 atom: functCall .

    $default  reduce using rule 55 (atom)


state 32

   56 atom: list .

    $default  reduce using rule 56 (atom)


state 33

   57 atom: indexOp .

    $default  reduce using rule 57 (atom)


state 34

   25 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 60


state 35

   65 type: INTEGER_T '[' . ']'

    ']'  shift, and go to state 61


state 36

    6 statement: IF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    conditionalExpression  go to state 62
    orExp                  go to state 43
    andExp                 go to state 44
    equality               go to state 45
    relationalOp           go to state 46
    expression             go to state 47
    term                   go to state 26
    power                  go to state 27
    unary                  go to state 28
    atom                   go to state 29
    functCall              go to state 31
    list                   go to state 32
    indexOp                go to state 33


state 37

   53 atom: NOTHING .

    $default  reduce using rule 53 (atom)


state 38

   46 unary: NOT unary .

    $default  reduce using rule 46 (unary)


state 39

    7 statement: RETURN expression . ';'
   38 expression: expression . '+' term
   39           | expression . '-' term

    ';'  shift, and go to state 63
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55


state 40

   66 functCall: IDENTIFIER '(' . arguments ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    $default  reduce using rule 59 (empty)

    expression  go to state 64
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    empty       go to state 65
    functCall   go to state 31
    arguments   go to state 66
    arglist     go to state 67
    list        go to state 32
    indexOp     go to state 33


state 41

   75 indexOp: IDENTIFIER '[' . expression ']'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression  go to state 68
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    functCall   go to state 31
    list        go to state 32
    indexOp     go to state 33


state 42

   58 atom: '(' conditionalExpression . ')'

    ')'  shift, and go to state 69


state 43

   13 conditionalExpression: orExp .
   15 orExp: orExp . OR andExp

    OR  shift, and go to state 70

    $default  reduce using rule 13 (conditionalExpression)


state 44

   14 orExp: andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 71

    $default  reduce using rule 14 (orExp)


state 45

   16 andExp: equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 72

    $default  reduce using rule 16 (andExp)


state 46

   18 equality: relationalOp .

    $default  reduce using rule 18 (equality)


state 47

   20 relationalOp: expression . '<' expression
   21             | expression . LE expression
   22             | expression . '>' expression
   23             | expression . GE expression
   24             | expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    LE   shift, and go to state 73
    GE   shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 24 (relationalOp)


state 48

   47 unary: '-' unary .

    $default  reduce using rule 47 (unary)


state 49

   38 expression: expression . '+' term
   39           | expression . '-' term
   73 valueList: expression .

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 73 (valueList)


state 50

   72 valueList: empty .

    $default  reduce using rule 72 (valueList)


state 51

   71 list: '[' valueList . ']'
   74 valueList: valueList . ',' expression

    ','  shift, and go to state 77
    ']'  shift, and go to state 78


state 52

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 53

    8 statement: expression ';' .

    $default  reduce using rule 8 (statement)


state 54

   38 expression: expression '+' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    term       go to state 79
    power      go to state 27
    unary      go to state 28
    atom       go to state 29
    functCall  go to state 31
    list       go to state 32
    indexOp    go to state 33


state 55

   39 expression: expression '-' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    term       go to state 80
    power      go to state 27
    unary      go to state 28
    atom       go to state 29
    functCall  go to state 31
    list       go to state 32
    indexOp    go to state 33


state 56

   41 term: term '*' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    power      go to state 81
    unary      go to state 28
    atom       go to state 29
    functCall  go to state 31
    list       go to state 32
    indexOp    go to state 33


state 57

   42 term: term '/' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    power      go to state 82
    unary      go to state 28
    atom       go to state 29
    functCall  go to state 31
    list       go to state 32
    indexOp    go to state 33


state 58

   44 power: power '^' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    unary      go to state 83
    atom       go to state 29
    functCall  go to state 31
    list       go to state 32
    indexOp    go to state 33


state 59

   34 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 84

    variableList          go to state 85
    variableDeclarations  go to state 86


state 60

   25 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 87

    $default  reduce using rule 59 (empty)

    formalParameters     go to state 88
    formalParameterList  go to state 89
    formalParameterDef   go to state 90
    empty                go to state 91
    type                 go to state 92


state 61

   65 type: INTEGER_T '[' ']' .

    $default  reduce using rule 65 (type)


state 62

    6 statement: IF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 93


state 63

    7 statement: RETURN expression ';' .

    $default  reduce using rule 7 (statement)


state 64

   38 expression: expression . '+' term
   39           | expression . '-' term
   69 arglist: expression .

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 69 (arglist)


state 65

   67 arguments: empty .

    $default  reduce using rule 67 (arguments)


state 66

   66 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 94


state 67

   68 arguments: arglist .
   70 arglist: arglist . ',' expression

    ','  shift, and go to state 95

    $default  reduce using rule 68 (arguments)


state 68

   38 expression: expression . '+' term
   39           | expression . '-' term
   75 indexOp: IDENTIFIER '[' expression . ']'

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    ']'  shift, and go to state 96


state 69

   58 atom: '(' conditionalExpression ')' .

    $default  reduce using rule 58 (atom)


state 70

   15 orExp: orExp OR . andExp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    andExp        go to state 97
    equality      go to state 45
    relationalOp  go to state 46
    expression    go to state 47
    term          go to state 26
    power         go to state 27
    unary         go to state 28
    atom          go to state 29
    functCall     go to state 31
    list          go to state 32
    indexOp       go to state 33


state 71

   17 andExp: andExp AND . equality

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    equality      go to state 98
    relationalOp  go to state 46
    expression    go to state 47
    term          go to state 26
    power         go to state 27
    unary         go to state 28
    atom          go to state 29
    functCall     go to state 31
    list          go to state 32
    indexOp       go to state 33


state 72

   19 equality: equality EQUAL . relationalOp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    relationalOp  go to state 99
    expression    go to state 47
    term          go to state 26
    power         go to state 27
    unary         go to state 28
    atom          go to state 29
    functCall     go to state 31
    list          go to state 32
    indexOp       go to state 33


state 73

   21 relationalOp: expression LE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression  go to state 100
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    functCall   go to state 31
    list        go to state 32
    indexOp     go to state 33


state 74

   23 relationalOp: expression GE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression  go to state 101
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    functCall   go to state 31
    list        go to state 32
    indexOp     go to state 33


state 75

   20 relationalOp: expression '<' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression  go to state 102
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    functCall   go to state 31
    list        go to state 32
    indexOp     go to state 33


state 76

   22 relationalOp: expression '>' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression  go to state 103
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    functCall   go to state 31
    list        go to state 32
    indexOp     go to state 33


state 77

   74 valueList: valueList ',' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression  go to state 104
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    functCall   go to state 31
    list        go to state 32
    indexOp     go to state 33


state 78

   71 list: '[' valueList ']' .

    $default  reduce using rule 71 (list)


state 79

   38 expression: expression '+' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    $default  reduce using rule 38 (expression)


state 80

   39 expression: expression '-' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    $default  reduce using rule 39 (expression)


state 81

   41 term: term '*' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 58

    $default  reduce using rule 41 (term)


state 82

   42 term: term '/' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 58

    $default  reduce using rule 42 (term)


state 83

   44 power: power '^' unary .

    $default  reduce using rule 44 (power)


state 84

   37 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 105


state 85

   34 variableDefinition: type $@1 variableList .
   36 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 106

    $default  reduce using rule 34 (variableDefinition)


state 86

   35 variableList: variableDeclarations .

    $default  reduce using rule 35 (variableList)


state 87

   64 type: NOTHING .

    $default  reduce using rule 64 (type)


state 88

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 107


state 89

   29 formalParameters: formalParameterList .
   31 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 108

    $default  reduce using rule 29 (formalParameters)


state 90

   30 formalParameterList: formalParameterDef .

    $default  reduce using rule 30 (formalParameterList)


state 91

   28 formalParameters: empty .

    $default  reduce using rule 28 (formalParameters)


state 92

   32 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 109


state 93

    6 statement: IF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 110
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 111
    block               go to state 112
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33


state 94

   66 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 66 (functCall)


state 95

   70 arglist: arglist ',' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression  go to state 113
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    functCall   go to state 31
    list        go to state 32
    indexOp     go to state 33


state 96

   75 indexOp: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 75 (indexOp)


state 97

   15 orExp: orExp OR andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 71

    $default  reduce using rule 15 (orExp)


state 98

   17 andExp: andExp AND equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 72

    $default  reduce using rule 17 (andExp)


state 99

   19 equality: equality EQUAL relationalOp .

    $default  reduce using rule 19 (equality)


state 100

   21 relationalOp: expression LE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 21 (relationalOp)


state 101

   23 relationalOp: expression GE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 23 (relationalOp)


state 102

   20 relationalOp: expression '<' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 20 (relationalOp)


state 103

   22 relationalOp: expression '>' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 22 (relationalOp)


state 104

   38 expression: expression . '+' term
   39           | expression . '-' term
   74 valueList: valueList ',' expression .

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 74 (valueList)


state 105

   37 variableDeclarations: IDENTIFIER '=' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression  go to state 114
    term        go to state 26
    power       go to state 27
    unary       go to state 28
    atom        go to state 29
    functCall   go to state 31
    list        go to state 32
    indexOp     go to state 33


state 106

   36 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 84

    variableDeclarations  go to state 115


state 107

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 116


state 108

   31 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 87

    formalParameterDef  go to state 117
    type                go to state 92


state 109

   32 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 32 (formalParameterDef)


state 110

   12 block: '{' . statementList '}'

    $default  reduce using rule 59 (empty)

    statementList  go to state 118
    empty          go to state 3


state 111

   11 block: statement .

    $default  reduce using rule 11 (block)


state 112

    6 statement: IF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 119
    ELIF  shift, and go to state 120

    elseBlock  go to state 121


state 113

   38 expression: expression . '+' term
   39           | expression . '-' term
   70 arglist: arglist ',' expression .

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 70 (arglist)


state 114

   37 variableDeclarations: IDENTIFIER '=' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55

    $default  reduce using rule 37 (variableDeclarations)


state 115

   36 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 36 (variableList)


state 116

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 87

    returnType  go to state 122
    type        go to state 123


state 117

   31 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 31 (formalParameterList)


state 118

    3 statementList: statementList . statement
   12 block: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '}'         shift, and go to state 124
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 22
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33


state 119

    9 elseBlock: ELSE . block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 110
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 111
    block               go to state 125
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33


state 120

   10 elseBlock: ELIF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 126


state 121

    6 statement: IF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 6 (statement)


state 122

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 127

    functionBody  go to state 128


state 123

   26 returnType: type .

    $default  reduce using rule 26 (returnType)


state 124

   12 block: '{' statementList '}' .

    $default  reduce using rule 12 (block)


state 125

    9 elseBlock: ELSE block .

    $default  reduce using rule 9 (elseBlock)


state 126

   10 elseBlock: ELIF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 37
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    conditionalExpression  go to state 129
    orExp                  go to state 43
    andExp                 go to state 44
    equality               go to state 45
    relationalOp           go to state 46
    expression             go to state 47
    term                   go to state 26
    power                  go to state 27
    unary                  go to state 28
    atom                   go to state 29
    functCall              go to state 31
    list                   go to state 32
    indexOp                go to state 33


state 127

   27 functionBody: '{' . statementList '}'

    $default  reduce using rule 59 (empty)

    statementList  go to state 130
    empty          go to state 3


state 128

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 25 (functionDefinition)


state 129

   10 elseBlock: ELIF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 131


state 130

    3 statementList: statementList . statement
   27 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '}'         shift, and go to state 132
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 22
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33


state 131

   10 elseBlock: ELIF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 110
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 111
    block               go to state 133
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33


state 132

   27 functionBody: '{' statementList '}' .

    $default  reduce using rule 27 (functionBody)


state 133

   10 elseBlock: ELIF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 119
    ELIF  shift, and go to state 120

    elseBlock  go to state 134


state 134

   10 elseBlock: ELIF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 10 (elseBlock)
