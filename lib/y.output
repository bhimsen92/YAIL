Terminals unused in grammar

   ARRAY_T


Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | IF '(' conditionalExpression ')' block elseBlock
    7          | RETURN conditionalExpression ';'
    8          | conditionalExpression ';'

    9 elseBlock: ELSE block
   10          | ELIF '(' conditionalExpression ')' block elseBlock

   11 block: statement
   12      | '{' statementList '}'

   13 conditionalExpression: orExp

   14 orExp: andExp
   15      | orExp OR andExp

   16 andExp: equality
   17       | andExp AND equality

   18 equality: relationalOp
   19         | equality EQUAL relationalOp

   20 relationalOp: expression '<' expression
   21             | expression LE expression
   22             | expression '>' expression
   23             | expression GE expression
   24             | expression

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

   26 returnType: type

   27 functionBody: '{' statementList '}'

   28 formalParameters: empty
   29                 | formalParameterList

   30 formalParameterList: formalParameterDef
   31                    | formalParameterList ',' formalParameterDef

   32 formalParameterDef: type IDENTIFIER

   33 $@1: /* empty */

   34 variableDefinition: type $@1 variableList

   35 variableList: variableDeclarations
   36             | variableList ',' variableDeclarations

   37 variableDeclarations: IDENTIFIER '=' expression

   38 expression: expression '+' term
   39           | expression '-' term
   40           | term

   41 term: term '*' power
   42     | term '/' power
   43     | power

   44 power: power '^' unary
   45      | unary

   46 unary: NOT unary
   47      | '-' unary
   48      | atom

   49 atom: IDENTIFIER
   50     | INTEGER
   51     | DOUBLE
   52     | STRING
   53     | NOTHING
   54     | EMPTY
   55     | functCall
   56     | list
   57     | indexOp
   58     | slice
   59     | memberShipOperator
   60     | '(' conditionalExpression ')'

   61 empty: /* empty */

   62 type: INTEGER_T
   63     | DOUBLE_T
   64     | STRING_T
   65     | FUNCTION_T
   66     | NOTHING
   67     | BOOL_T
   68     | INTEGER_T '[' ']'

   69 functCall: IDENTIFIER '(' arguments ')'

   70 arguments: empty
   71          | arglist

   72 arglist: expression
   73        | arglist ',' expression

   74 list: '[' valueList ']'

   75 valueList: empty
   76          | expression
   77          | valueList ',' expression

   78 indexOp: IDENTIFIER '[' expression ']'

   79 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']'

   80 sliceExp: empty
   81         | expression

   82 memberShipOperator: IDENTIFIER '.' IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 10 25 60 69
')' (41) 6 10 25 60 69
'*' (42) 41
'+' (43) 38
',' (44) 31 36 73 77
'-' (45) 39 47
'.' (46) 82
'/' (47) 42
':' (58) 25 79
';' (59) 4 7 8
'<' (60) 20
'=' (61) 37
'>' (62) 22
'[' (91) 68 74 78 79
']' (93) 68 74 78 79
'^' (94) 44
'{' (123) 12 27
'}' (125) 12 27
error (256)
FUNCTION (258) 25
INTEGER_T (259) 62 68
DOUBLE_T (260) 63
STRING_T (261) 64
FUNCTION_T (262) 65
BOOL_T (263) 67
OR (264) 15
AND (265) 17
EQUAL (266) 19
LE (267) 21
GE (268) 23
IF (269) 6
ELSE (270) 9
NOT (271) 46
ELIF (272) 10
RETURN (273) 7
ARRAY_T (274)
IDENTIFIER (275) 25 32 37 49 69 78 79 82
STRING (276) 52
INTEGER (277) 50
DOUBLE (278) 51
NOTHING (279) 53 66
EMPTY (280) 54


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
program (45)
    on left: 1, on right: 0
statementList (46)
    on left: 2 3, on right: 1 3 12 27
statement (47)
    on left: 4 5 6 7 8, on right: 3 11
elseBlock (48)
    on left: 9 10, on right: 6 10
block (49)
    on left: 11 12, on right: 6 9 10
conditionalExpression (50)
    on left: 13, on right: 6 7 8 10 60
orExp (51)
    on left: 14 15, on right: 13 15
andExp (52)
    on left: 16 17, on right: 14 15 17
equality (53)
    on left: 18 19, on right: 16 17 19
relationalOp (54)
    on left: 20 21 22 23 24, on right: 18 19
functionDefinition (55)
    on left: 25, on right: 5
returnType (56)
    on left: 26, on right: 25
functionBody (57)
    on left: 27, on right: 25
formalParameters (58)
    on left: 28 29, on right: 25
formalParameterList (59)
    on left: 30 31, on right: 29 31
formalParameterDef (60)
    on left: 32, on right: 30 31
variableDefinition (61)
    on left: 34, on right: 4
$@1 (62)
    on left: 33, on right: 34
variableList (63)
    on left: 35 36, on right: 34 36
variableDeclarations (64)
    on left: 37, on right: 35 36
expression (65)
    on left: 38 39 40, on right: 20 21 22 23 24 37 38 39 72 73 76 77
    78 81
term (66)
    on left: 41 42 43, on right: 38 39 40 41 42
power (67)
    on left: 44 45, on right: 41 42 43 44
unary (68)
    on left: 46 47 48, on right: 44 45 46 47
atom (69)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60, on right: 48
empty (70)
    on left: 61, on right: 2 28 70 75 80
type (71)
    on left: 62 63 64 65 66 67 68, on right: 26 32 34
functCall (72)
    on left: 69, on right: 55
arguments (73)
    on left: 70 71, on right: 69
arglist (74)
    on left: 72 73, on right: 71 73
list (75)
    on left: 74, on right: 56
valueList (76)
    on left: 75 76 77, on right: 74 77
indexOp (77)
    on left: 78, on right: 57
slice (78)
    on left: 79, on right: 58
sliceExp (79)
    on left: 80 81, on right: 79
memberShipOperator (80)
    on left: 82, on right: 59


state 0

    0 $accept: . program $end

    $default  reduce using rule 61 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 1 (program)

    statement              go to state 23
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

   25 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 42


state 6

   62 type: INTEGER_T .
   68     | INTEGER_T . '[' ']'

    '['  shift, and go to state 43

    $default  reduce using rule 62 (type)


state 7

   63 type: DOUBLE_T .

    $default  reduce using rule 63 (type)


state 8

   64 type: STRING_T .

    $default  reduce using rule 64 (type)


state 9

   65 type: FUNCTION_T .

    $default  reduce using rule 65 (type)


state 10

   67 type: BOOL_T .

    $default  reduce using rule 67 (type)


state 11

    6 statement: IF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 44


state 12

   46 unary: NOT . unary

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    unary               go to state 46
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 13

    7 statement: RETURN . conditionalExpression ';'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    conditionalExpression  go to state 47
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 14

   49 atom: IDENTIFIER .
   69 functCall: IDENTIFIER . '(' arguments ')'
   78 indexOp: IDENTIFIER . '[' expression ']'
   79 slice: IDENTIFIER . '[' sliceExp ':' sliceExp ']'
   82 memberShipOperator: IDENTIFIER . '.' IDENTIFIER

    '('  shift, and go to state 48
    '['  shift, and go to state 49
    '.'  shift, and go to state 50

    $default  reduce using rule 49 (atom)


state 15

   52 atom: STRING .

    $default  reduce using rule 52 (atom)


state 16

   50 atom: INTEGER .

    $default  reduce using rule 50 (atom)


state 17

   51 atom: DOUBLE .

    $default  reduce using rule 51 (atom)


state 18

   53 atom: NOTHING .
   66 type: NOTHING .

    IDENTIFIER  reduce using rule 66 (type)
    $default    reduce using rule 53 (atom)


state 19

   54 atom: EMPTY .

    $default  reduce using rule 54 (atom)


state 20

   60 atom: '(' . conditionalExpression ')'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    conditionalExpression  go to state 51
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 21

   47 unary: '-' . unary

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    unary               go to state 52
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 22

   74 list: '[' . valueList ']'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 61 (empty)

    expression          go to state 53
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    empty               go to state 54
    functCall           go to state 37
    list                go to state 38
    valueList           go to state 55
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 23

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 24

    8 statement: conditionalExpression . ';'

    ';'  shift, and go to state 56


state 25

   13 conditionalExpression: orExp .
   15 orExp: orExp . OR andExp

    OR  shift, and go to state 57

    $default  reduce using rule 13 (conditionalExpression)


state 26

   14 orExp: andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 58

    $default  reduce using rule 14 (orExp)


state 27

   16 andExp: equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 59

    $default  reduce using rule 16 (andExp)


state 28

   18 equality: relationalOp .

    $default  reduce using rule 18 (equality)


state 29

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 30

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 60


state 31

   20 relationalOp: expression . '<' expression
   21             | expression . LE expression
   22             | expression . '>' expression
   23             | expression . GE expression
   24             | expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    LE   shift, and go to state 61
    GE   shift, and go to state 62
    '<'  shift, and go to state 63
    '>'  shift, and go to state 64
    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 24 (relationalOp)


state 32

   40 expression: term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68

    $default  reduce using rule 40 (expression)


state 33

   43 term: power .
   44 power: power . '^' unary

    '^'  shift, and go to state 69

    $default  reduce using rule 43 (term)


state 34

   45 power: unary .

    $default  reduce using rule 45 (power)


state 35

   48 unary: atom .

    $default  reduce using rule 48 (unary)


state 36

   34 variableDefinition: type . $@1 variableList

    $default  reduce using rule 33 ($@1)

    $@1  go to state 70


state 37

   55 atom: functCall .

    $default  reduce using rule 55 (atom)


state 38

   56 atom: list .

    $default  reduce using rule 56 (atom)


state 39

   57 atom: indexOp .

    $default  reduce using rule 57 (atom)


state 40

   58 atom: slice .

    $default  reduce using rule 58 (atom)


state 41

   59 atom: memberShipOperator .

    $default  reduce using rule 59 (atom)


state 42

   25 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 71


state 43

   68 type: INTEGER_T '[' . ']'

    ']'  shift, and go to state 72


state 44

    6 statement: IF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    conditionalExpression  go to state 73
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 45

   53 atom: NOTHING .

    $default  reduce using rule 53 (atom)


state 46

   46 unary: NOT unary .

    $default  reduce using rule 46 (unary)


state 47

    7 statement: RETURN conditionalExpression . ';'

    ';'  shift, and go to state 74


state 48

   69 functCall: IDENTIFIER '(' . arguments ')'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 61 (empty)

    expression          go to state 75
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    empty               go to state 76
    functCall           go to state 37
    arguments           go to state 77
    arglist             go to state 78
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 49

   78 indexOp: IDENTIFIER '[' . expression ']'
   79 slice: IDENTIFIER '[' . sliceExp ':' sliceExp ']'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 61 (empty)

    expression          go to state 79
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    empty               go to state 80
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    sliceExp            go to state 81
    memberShipOperator  go to state 41


state 50

   82 memberShipOperator: IDENTIFIER '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 82


state 51

   60 atom: '(' conditionalExpression . ')'

    ')'  shift, and go to state 83


state 52

   47 unary: '-' unary .

    $default  reduce using rule 47 (unary)


state 53

   38 expression: expression . '+' term
   39           | expression . '-' term
   76 valueList: expression .

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 76 (valueList)


state 54

   75 valueList: empty .

    $default  reduce using rule 75 (valueList)


state 55

   74 list: '[' valueList . ']'
   77 valueList: valueList . ',' expression

    ','  shift, and go to state 84
    ']'  shift, and go to state 85


state 56

    8 statement: conditionalExpression ';' .

    $default  reduce using rule 8 (statement)


state 57

   15 orExp: orExp OR . andExp

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    andExp              go to state 86
    equality            go to state 27
    relationalOp        go to state 28
    expression          go to state 31
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 58

   17 andExp: andExp AND . equality

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    equality            go to state 87
    relationalOp        go to state 28
    expression          go to state 31
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 59

   19 equality: equality EQUAL . relationalOp

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    relationalOp        go to state 88
    expression          go to state 31
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 60

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 61

   21 relationalOp: expression LE . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression          go to state 89
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 62

   23 relationalOp: expression GE . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression          go to state 90
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 63

   20 relationalOp: expression '<' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression          go to state 91
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 64

   22 relationalOp: expression '>' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression          go to state 92
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 65

   38 expression: expression '+' . term

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    term                go to state 93
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 66

   39 expression: expression '-' . term

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    term                go to state 94
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 67

   41 term: term '*' . power

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    power               go to state 95
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 68

   42 term: term '/' . power

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    power               go to state 96
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 69

   44 power: power '^' . unary

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    unary               go to state 97
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 70

   34 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 98

    variableList          go to state 99
    variableDeclarations  go to state 100


state 71

   25 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 101

    $default  reduce using rule 61 (empty)

    formalParameters     go to state 102
    formalParameterList  go to state 103
    formalParameterDef   go to state 104
    empty                go to state 105
    type                 go to state 106


state 72

   68 type: INTEGER_T '[' ']' .

    $default  reduce using rule 68 (type)


state 73

    6 statement: IF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 107


state 74

    7 statement: RETURN conditionalExpression ';' .

    $default  reduce using rule 7 (statement)


state 75

   38 expression: expression . '+' term
   39           | expression . '-' term
   72 arglist: expression .

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 72 (arglist)


state 76

   70 arguments: empty .

    $default  reduce using rule 70 (arguments)


state 77

   69 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 108


state 78

   71 arguments: arglist .
   73 arglist: arglist . ',' expression

    ','  shift, and go to state 109

    $default  reduce using rule 71 (arguments)


state 79

   38 expression: expression . '+' term
   39           | expression . '-' term
   78 indexOp: IDENTIFIER '[' expression . ']'
   81 sliceExp: expression .

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66
    ']'  shift, and go to state 110

    $default  reduce using rule 81 (sliceExp)


state 80

   80 sliceExp: empty .

    $default  reduce using rule 80 (sliceExp)


state 81

   79 slice: IDENTIFIER '[' sliceExp . ':' sliceExp ']'

    ':'  shift, and go to state 111


state 82

   82 memberShipOperator: IDENTIFIER '.' IDENTIFIER .

    $default  reduce using rule 82 (memberShipOperator)


state 83

   60 atom: '(' conditionalExpression ')' .

    $default  reduce using rule 60 (atom)


state 84

   77 valueList: valueList ',' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression          go to state 112
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 85

   74 list: '[' valueList ']' .

    $default  reduce using rule 74 (list)


state 86

   15 orExp: orExp OR andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 58

    $default  reduce using rule 15 (orExp)


state 87

   17 andExp: andExp AND equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 59

    $default  reduce using rule 17 (andExp)


state 88

   19 equality: equality EQUAL relationalOp .

    $default  reduce using rule 19 (equality)


state 89

   21 relationalOp: expression LE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 21 (relationalOp)


state 90

   23 relationalOp: expression GE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 23 (relationalOp)


state 91

   20 relationalOp: expression '<' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 20 (relationalOp)


state 92

   22 relationalOp: expression '>' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 22 (relationalOp)


state 93

   38 expression: expression '+' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68

    $default  reduce using rule 38 (expression)


state 94

   39 expression: expression '-' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 67
    '/'  shift, and go to state 68

    $default  reduce using rule 39 (expression)


state 95

   41 term: term '*' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 69

    $default  reduce using rule 41 (term)


state 96

   42 term: term '/' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 69

    $default  reduce using rule 42 (term)


state 97

   44 power: power '^' unary .

    $default  reduce using rule 44 (power)


state 98

   37 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 113


state 99

   34 variableDefinition: type $@1 variableList .
   36 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 114

    $default  reduce using rule 34 (variableDefinition)


state 100

   35 variableList: variableDeclarations .

    $default  reduce using rule 35 (variableList)


state 101

   66 type: NOTHING .

    $default  reduce using rule 66 (type)


state 102

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 115


state 103

   29 formalParameters: formalParameterList .
   31 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 116

    $default  reduce using rule 29 (formalParameters)


state 104

   30 formalParameterList: formalParameterDef .

    $default  reduce using rule 30 (formalParameterList)


state 105

   28 formalParameters: empty .

    $default  reduce using rule 28 (formalParameters)


state 106

   32 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 117


state 107

    6 statement: IF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 118
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 119
    block                  go to state 120
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 108

   69 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 69 (functCall)


state 109

   73 arglist: arglist ',' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression          go to state 121
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 110

   78 indexOp: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 78 (indexOp)


state 111

   79 slice: IDENTIFIER '[' sliceExp ':' . sliceExp ']'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 61 (empty)

    expression          go to state 122
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    empty               go to state 80
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    sliceExp            go to state 123
    memberShipOperator  go to state 41


state 112

   38 expression: expression . '+' term
   39           | expression . '-' term
   77 valueList: valueList ',' expression .

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 77 (valueList)


state 113

   37 variableDeclarations: IDENTIFIER '=' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression          go to state 124
    term                go to state 32
    power               go to state 33
    unary               go to state 34
    atom                go to state 35
    functCall           go to state 37
    list                go to state 38
    indexOp             go to state 39
    slice               go to state 40
    memberShipOperator  go to state 41


state 114

   36 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 98

    variableDeclarations  go to state 125


state 115

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 126


state 116

   31 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 101

    formalParameterDef  go to state 127
    type                go to state 106


state 117

   32 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 32 (formalParameterDef)


state 118

   12 block: '{' . statementList '}'

    $default  reduce using rule 61 (empty)

    statementList  go to state 128
    empty          go to state 3


state 119

   11 block: statement .

    $default  reduce using rule 11 (block)


state 120

    6 statement: IF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 129
    ELIF  shift, and go to state 130

    elseBlock  go to state 131


state 121

   38 expression: expression . '+' term
   39           | expression . '-' term
   73 arglist: arglist ',' expression .

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 73 (arglist)


state 122

   38 expression: expression . '+' term
   39           | expression . '-' term
   81 sliceExp: expression .

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 81 (sliceExp)


state 123

   79 slice: IDENTIFIER '[' sliceExp ':' sliceExp . ']'

    ']'  shift, and go to state 132


state 124

   37 variableDeclarations: IDENTIFIER '=' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 65
    '-'  shift, and go to state 66

    $default  reduce using rule 37 (variableDeclarations)


state 125

   36 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 36 (variableList)


state 126

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 101

    returnType  go to state 133
    type        go to state 134


state 127

   31 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 31 (formalParameterList)


state 128

    3 statementList: statementList . statement
   12 block: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '}'         shift, and go to state 135
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 23
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 129

    9 elseBlock: ELSE . block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 118
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 119
    block                  go to state 136
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 130

   10 elseBlock: ELIF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 137


state 131

    6 statement: IF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 6 (statement)


state 132

   79 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']' .

    $default  reduce using rule 79 (slice)


state 133

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 138

    functionBody  go to state 139


state 134

   26 returnType: type .

    $default  reduce using rule 26 (returnType)


state 135

   12 block: '{' statementList '}' .

    $default  reduce using rule 12 (block)


state 136

    9 elseBlock: ELSE block .

    $default  reduce using rule 9 (elseBlock)


state 137

   10 elseBlock: ELIF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 45
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    conditionalExpression  go to state 140
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 138

   27 functionBody: '{' . statementList '}'

    $default  reduce using rule 61 (empty)

    statementList  go to state 141
    empty          go to state 3


state 139

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 25 (functionDefinition)


state 140

   10 elseBlock: ELIF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 142


state 141

    3 statementList: statementList . statement
   27 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '}'         shift, and go to state 143
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 23
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 142

   10 elseBlock: ELIF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 118
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 119
    block                  go to state 144
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40
    memberShipOperator     go to state 41


state 143

   27 functionBody: '{' statementList '}' .

    $default  reduce using rule 27 (functionBody)


state 144

   10 elseBlock: ELIF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 129
    ELIF  shift, and go to state 130

    elseBlock  go to state 145


state 145

   10 elseBlock: ELIF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 10 (elseBlock)
