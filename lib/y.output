Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | IF '(' conditionalExpression ')' block elseBlock
    7          | RETURN conditionalExpression ';'
    8          | conditionalExpression ';'

    9 elseBlock: ELSE block
   10          | ELIF '(' conditionalExpression ')' block elseBlock

   11 block: statement
   12      | '{' statementList '}'

   13 conditionalExpression: orExp

   14 orExp: andExp
   15      | orExp OR andExp

   16 andExp: equality
   17       | andExp AND equality

   18 equality: relationalOp
   19         | equality EQUAL relationalOp

   20 relationalOp: expression '<' expression
   21             | expression LE expression
   22             | expression '>' expression
   23             | expression GE expression
   24             | expression

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

   26 returnType: type

   27 functionBody: '{' statementList '}'

   28 formalParameters: empty
   29                 | formalParameterList

   30 formalParameterList: formalParameterDef
   31                    | formalParameterList ',' formalParameterDef

   32 formalParameterDef: type IDENTIFIER

   33 $@1: /* empty */

   34 variableDefinition: type $@1 variableList

   35 variableList: variableDeclarations
   36             | variableList ',' variableDeclarations

   37 variableDeclarations: IDENTIFIER '=' expression

   38 expression: expression '+' term
   39           | expression '-' term
   40           | term

   41 term: term '*' power
   42     | term '/' power
   43     | term '%' power
   44     | power

   45 power: power '^' unary
   46      | unary

   47 unary: NOT unary
   48      | '-' unary
   49      | atom

   50 atom: IDENTIFIER
   51     | INTEGER
   52     | DOUBLE
   53     | STRING
   54     | BOOLEAN
   55     | NOTHING
   56     | EMPTY
   57     | functCall
   58     | list
   59     | indexOp
   60     | slice
   61     | memberShipOperator
   62     | SPAWN functCall
   63     | SYNC
   64     | '(' conditionalExpression ')'

   65 empty: /* empty */

   66 type: INTEGER_T
   67     | DOUBLE_T
   68     | STRING_T
   69     | FUNCTION_T
   70     | NOTHING
   71     | BOOL_T
   72     | INTEGER_T '[' ']'
   73     | DOUBLE_T '[' ']'

   74 functCall: IDENTIFIER '(' arguments ')'

   75 arguments: empty
   76          | arglist

   77 arglist: expression
   78        | arglist ',' expression

   79 list: '[' valueList ']'

   80 valueList: empty
   81          | expression
   82          | valueList ',' expression

   83 indexOp: IDENTIFIER '[' expression ']'

   84 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']'

   85 sliceExp: empty
   86         | expression

   87 memberShipOperator: IDENTIFIER '.' IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'%' (37) 43
'(' (40) 6 10 25 64 74
')' (41) 6 10 25 64 74
'*' (42) 41
'+' (43) 38
',' (44) 31 36 78 82
'-' (45) 39 48
'.' (46) 87
'/' (47) 42
':' (58) 25 84
';' (59) 4 7 8
'<' (60) 20
'=' (61) 37
'>' (62) 22
'[' (91) 72 73 79 83 84
']' (93) 72 73 79 83 84
'^' (94) 45
'{' (123) 12 27
'}' (125) 12 27
error (256)
FUNCTION (258) 25
INTEGER_T (259) 66 72
DOUBLE_T (260) 67 73
STRING_T (261) 68
FUNCTION_T (262) 69
BOOL_T (263) 71
OR (264) 15
AND (265) 17
EQUAL (266) 19
LE (267) 21
GE (268) 23
IF (269) 6
ELSE (270) 9
NOT (271) 47
ELIF (272) 10
RETURN (273) 7
SPAWN (274) 62
SYNC (275) 63
IDENTIFIER (276) 25 32 37 50 74 83 84 87
STRING (277) 53
BOOLEAN (278) 54
INTEGER (279) 51
DOUBLE (280) 52
NOTHING (281) 55 70
EMPTY (282) 56


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
statementList (49)
    on left: 2 3, on right: 1 3 12 27
statement (50)
    on left: 4 5 6 7 8, on right: 3 11
elseBlock (51)
    on left: 9 10, on right: 6 10
block (52)
    on left: 11 12, on right: 6 9 10
conditionalExpression (53)
    on left: 13, on right: 6 7 8 10 64
orExp (54)
    on left: 14 15, on right: 13 15
andExp (55)
    on left: 16 17, on right: 14 15 17
equality (56)
    on left: 18 19, on right: 16 17 19
relationalOp (57)
    on left: 20 21 22 23 24, on right: 18 19
functionDefinition (58)
    on left: 25, on right: 5
returnType (59)
    on left: 26, on right: 25
functionBody (60)
    on left: 27, on right: 25
formalParameters (61)
    on left: 28 29, on right: 25
formalParameterList (62)
    on left: 30 31, on right: 29 31
formalParameterDef (63)
    on left: 32, on right: 30 31
variableDefinition (64)
    on left: 34, on right: 4
$@1 (65)
    on left: 33, on right: 34
variableList (66)
    on left: 35 36, on right: 34 36
variableDeclarations (67)
    on left: 37, on right: 35 36
expression (68)
    on left: 38 39 40, on right: 20 21 22 23 24 37 38 39 77 78 81 82
    83 86
term (69)
    on left: 41 42 43 44, on right: 38 39 40 41 42 43
power (70)
    on left: 45 46, on right: 41 42 43 44 45
unary (71)
    on left: 47 48 49, on right: 45 46 47 48
atom (72)
    on left: 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64, on right:
    49
empty (73)
    on left: 65, on right: 2 28 75 80 85
type (74)
    on left: 66 67 68 69 70 71 72 73, on right: 26 32 34
functCall (75)
    on left: 74, on right: 57 62
arguments (76)
    on left: 75 76, on right: 74
arglist (77)
    on left: 77 78, on right: 76 78
list (78)
    on left: 79, on right: 58
valueList (79)
    on left: 80 81 82, on right: 79 82
indexOp (80)
    on left: 83, on right: 59
slice (81)
    on left: 84, on right: 60
sliceExp (82)
    on left: 85 86, on right: 84
memberShipOperator (83)
    on left: 87, on right: 61


state 0

    0 $accept: . program $end

    $default  reduce using rule 65 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 21
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    $default  reduce using rule 1 (program)

    statement              go to state 26
    conditionalExpression  go to state 27
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    functionDefinition     go to state 32
    variableDefinition     go to state 33
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    type                   go to state 39
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

   25 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 45


state 6

   66 type: INTEGER_T .
   72     | INTEGER_T . '[' ']'

    '['  shift, and go to state 46

    $default  reduce using rule 66 (type)


state 7

   67 type: DOUBLE_T .
   73     | DOUBLE_T . '[' ']'

    '['  shift, and go to state 47

    $default  reduce using rule 67 (type)


state 8

   68 type: STRING_T .

    $default  reduce using rule 68 (type)


state 9

   69 type: FUNCTION_T .

    $default  reduce using rule 69 (type)


state 10

   71 type: BOOL_T .

    $default  reduce using rule 71 (type)


state 11

    6 statement: IF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 48


state 12

   47 unary: NOT . unary

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    unary               go to state 50
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 13

    7 statement: RETURN . conditionalExpression ';'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    conditionalExpression  go to state 51
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 14

   62 atom: SPAWN . functCall

    IDENTIFIER  shift, and go to state 52

    functCall  go to state 53


state 15

   63 atom: SYNC .

    $default  reduce using rule 63 (atom)


state 16

   50 atom: IDENTIFIER .
   74 functCall: IDENTIFIER . '(' arguments ')'
   83 indexOp: IDENTIFIER . '[' expression ']'
   84 slice: IDENTIFIER . '[' sliceExp ':' sliceExp ']'
   87 memberShipOperator: IDENTIFIER . '.' IDENTIFIER

    '('  shift, and go to state 54
    '['  shift, and go to state 55
    '.'  shift, and go to state 56

    $default  reduce using rule 50 (atom)


state 17

   53 atom: STRING .

    $default  reduce using rule 53 (atom)


state 18

   54 atom: BOOLEAN .

    $default  reduce using rule 54 (atom)


state 19

   51 atom: INTEGER .

    $default  reduce using rule 51 (atom)


state 20

   52 atom: DOUBLE .

    $default  reduce using rule 52 (atom)


state 21

   55 atom: NOTHING .
   70 type: NOTHING .

    IDENTIFIER  reduce using rule 70 (type)
    $default    reduce using rule 55 (atom)


state 22

   56 atom: EMPTY .

    $default  reduce using rule 56 (atom)


state 23

   64 atom: '(' . conditionalExpression ')'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    conditionalExpression  go to state 57
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 24

   48 unary: '-' . unary

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    unary               go to state 58
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 25

   79 list: '[' . valueList ']'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    $default  reduce using rule 65 (empty)

    expression          go to state 59
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    empty               go to state 60
    functCall           go to state 40
    list                go to state 41
    valueList           go to state 61
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 26

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 27

    8 statement: conditionalExpression . ';'

    ';'  shift, and go to state 62


state 28

   13 conditionalExpression: orExp .
   15 orExp: orExp . OR andExp

    OR  shift, and go to state 63

    $default  reduce using rule 13 (conditionalExpression)


state 29

   14 orExp: andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 64

    $default  reduce using rule 14 (orExp)


state 30

   16 andExp: equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 65

    $default  reduce using rule 16 (andExp)


state 31

   18 equality: relationalOp .

    $default  reduce using rule 18 (equality)


state 32

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 33

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 66


state 34

   20 relationalOp: expression . '<' expression
   21             | expression . LE expression
   22             | expression . '>' expression
   23             | expression . GE expression
   24             | expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    LE   shift, and go to state 67
    GE   shift, and go to state 68
    '<'  shift, and go to state 69
    '>'  shift, and go to state 70
    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 24 (relationalOp)


state 35

   40 expression: term .
   41 term: term . '*' power
   42     | term . '/' power
   43     | term . '%' power

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 40 (expression)


state 36

   44 term: power .
   45 power: power . '^' unary

    '^'  shift, and go to state 76

    $default  reduce using rule 44 (term)


state 37

   46 power: unary .

    $default  reduce using rule 46 (power)


state 38

   49 unary: atom .

    $default  reduce using rule 49 (unary)


state 39

   34 variableDefinition: type . $@1 variableList

    $default  reduce using rule 33 ($@1)

    $@1  go to state 77


state 40

   57 atom: functCall .

    $default  reduce using rule 57 (atom)


state 41

   58 atom: list .

    $default  reduce using rule 58 (atom)


state 42

   59 atom: indexOp .

    $default  reduce using rule 59 (atom)


state 43

   60 atom: slice .

    $default  reduce using rule 60 (atom)


state 44

   61 atom: memberShipOperator .

    $default  reduce using rule 61 (atom)


state 45

   25 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 78


state 46

   72 type: INTEGER_T '[' . ']'

    ']'  shift, and go to state 79


state 47

   73 type: DOUBLE_T '[' . ']'

    ']'  shift, and go to state 80


state 48

    6 statement: IF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    conditionalExpression  go to state 81
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 49

   55 atom: NOTHING .

    $default  reduce using rule 55 (atom)


state 50

   47 unary: NOT unary .

    $default  reduce using rule 47 (unary)


state 51

    7 statement: RETURN conditionalExpression . ';'

    ';'  shift, and go to state 82


state 52

   74 functCall: IDENTIFIER . '(' arguments ')'

    '('  shift, and go to state 54


state 53

   62 atom: SPAWN functCall .

    $default  reduce using rule 62 (atom)


state 54

   74 functCall: IDENTIFIER '(' . arguments ')'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    $default  reduce using rule 65 (empty)

    expression          go to state 83
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    empty               go to state 84
    functCall           go to state 40
    arguments           go to state 85
    arglist             go to state 86
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 55

   83 indexOp: IDENTIFIER '[' . expression ']'
   84 slice: IDENTIFIER '[' . sliceExp ':' sliceExp ']'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    $default  reduce using rule 65 (empty)

    expression          go to state 87
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    empty               go to state 88
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    sliceExp            go to state 89
    memberShipOperator  go to state 44


state 56

   87 memberShipOperator: IDENTIFIER '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 90


state 57

   64 atom: '(' conditionalExpression . ')'

    ')'  shift, and go to state 91


state 58

   48 unary: '-' unary .

    $default  reduce using rule 48 (unary)


state 59

   38 expression: expression . '+' term
   39           | expression . '-' term
   81 valueList: expression .

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 81 (valueList)


state 60

   80 valueList: empty .

    $default  reduce using rule 80 (valueList)


state 61

   79 list: '[' valueList . ']'
   82 valueList: valueList . ',' expression

    ','  shift, and go to state 92
    ']'  shift, and go to state 93


state 62

    8 statement: conditionalExpression ';' .

    $default  reduce using rule 8 (statement)


state 63

   15 orExp: orExp OR . andExp

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    andExp              go to state 94
    equality            go to state 30
    relationalOp        go to state 31
    expression          go to state 34
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 64

   17 andExp: andExp AND . equality

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    equality            go to state 95
    relationalOp        go to state 31
    expression          go to state 34
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 65

   19 equality: equality EQUAL . relationalOp

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    relationalOp        go to state 96
    expression          go to state 34
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 66

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 67

   21 relationalOp: expression LE . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    expression          go to state 97
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 68

   23 relationalOp: expression GE . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    expression          go to state 98
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 69

   20 relationalOp: expression '<' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    expression          go to state 99
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 70

   22 relationalOp: expression '>' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    expression          go to state 100
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 71

   38 expression: expression '+' . term

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    term                go to state 101
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 72

   39 expression: expression '-' . term

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    term                go to state 102
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 73

   41 term: term '*' . power

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    power               go to state 103
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 74

   42 term: term '/' . power

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    power               go to state 104
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 75

   43 term: term '%' . power

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    power               go to state 105
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 76

   45 power: power '^' . unary

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    unary               go to state 106
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 77

   34 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 107

    variableList          go to state 108
    variableDeclarations  go to state 109


state 78

   25 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 110

    $default  reduce using rule 65 (empty)

    formalParameters     go to state 111
    formalParameterList  go to state 112
    formalParameterDef   go to state 113
    empty                go to state 114
    type                 go to state 115


state 79

   72 type: INTEGER_T '[' ']' .

    $default  reduce using rule 72 (type)


state 80

   73 type: DOUBLE_T '[' ']' .

    $default  reduce using rule 73 (type)


state 81

    6 statement: IF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 116


state 82

    7 statement: RETURN conditionalExpression ';' .

    $default  reduce using rule 7 (statement)


state 83

   38 expression: expression . '+' term
   39           | expression . '-' term
   77 arglist: expression .

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 77 (arglist)


state 84

   75 arguments: empty .

    $default  reduce using rule 75 (arguments)


state 85

   74 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 117


state 86

   76 arguments: arglist .
   78 arglist: arglist . ',' expression

    ','  shift, and go to state 118

    $default  reduce using rule 76 (arguments)


state 87

   38 expression: expression . '+' term
   39           | expression . '-' term
   83 indexOp: IDENTIFIER '[' expression . ']'
   86 sliceExp: expression .

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72
    ']'  shift, and go to state 119

    $default  reduce using rule 86 (sliceExp)


state 88

   85 sliceExp: empty .

    $default  reduce using rule 85 (sliceExp)


state 89

   84 slice: IDENTIFIER '[' sliceExp . ':' sliceExp ']'

    ':'  shift, and go to state 120


state 90

   87 memberShipOperator: IDENTIFIER '.' IDENTIFIER .

    $default  reduce using rule 87 (memberShipOperator)


state 91

   64 atom: '(' conditionalExpression ')' .

    $default  reduce using rule 64 (atom)


state 92

   82 valueList: valueList ',' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    expression          go to state 121
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 93

   79 list: '[' valueList ']' .

    $default  reduce using rule 79 (list)


state 94

   15 orExp: orExp OR andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 64

    $default  reduce using rule 15 (orExp)


state 95

   17 andExp: andExp AND equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 65

    $default  reduce using rule 17 (andExp)


state 96

   19 equality: equality EQUAL relationalOp .

    $default  reduce using rule 19 (equality)


state 97

   21 relationalOp: expression LE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 21 (relationalOp)


state 98

   23 relationalOp: expression GE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 23 (relationalOp)


state 99

   20 relationalOp: expression '<' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 20 (relationalOp)


state 100

   22 relationalOp: expression '>' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 22 (relationalOp)


state 101

   38 expression: expression '+' term .
   41 term: term . '*' power
   42     | term . '/' power
   43     | term . '%' power

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 38 (expression)


state 102

   39 expression: expression '-' term .
   41 term: term . '*' power
   42     | term . '/' power
   43     | term . '%' power

    '*'  shift, and go to state 73
    '/'  shift, and go to state 74
    '%'  shift, and go to state 75

    $default  reduce using rule 39 (expression)


state 103

   41 term: term '*' power .
   45 power: power . '^' unary

    '^'  shift, and go to state 76

    $default  reduce using rule 41 (term)


state 104

   42 term: term '/' power .
   45 power: power . '^' unary

    '^'  shift, and go to state 76

    $default  reduce using rule 42 (term)


state 105

   43 term: term '%' power .
   45 power: power . '^' unary

    '^'  shift, and go to state 76

    $default  reduce using rule 43 (term)


state 106

   45 power: power '^' unary .

    $default  reduce using rule 45 (power)


state 107

   37 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 122


state 108

   34 variableDefinition: type $@1 variableList .
   36 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 123

    $default  reduce using rule 34 (variableDefinition)


state 109

   35 variableList: variableDeclarations .

    $default  reduce using rule 35 (variableList)


state 110

   70 type: NOTHING .

    $default  reduce using rule 70 (type)


state 111

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 124


state 112

   29 formalParameters: formalParameterList .
   31 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 125

    $default  reduce using rule 29 (formalParameters)


state 113

   30 formalParameterList: formalParameterDef .

    $default  reduce using rule 30 (formalParameterList)


state 114

   28 formalParameters: empty .

    $default  reduce using rule 28 (formalParameters)


state 115

   32 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 126


state 116

    6 statement: IF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 21
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 127
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    statement              go to state 128
    block                  go to state 129
    conditionalExpression  go to state 27
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    functionDefinition     go to state 32
    variableDefinition     go to state 33
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    type                   go to state 39
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 117

   74 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 74 (functCall)


state 118

   78 arglist: arglist ',' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    expression          go to state 130
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 119

   83 indexOp: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 83 (indexOp)


state 120

   84 slice: IDENTIFIER '[' sliceExp ':' . sliceExp ']'

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    $default  reduce using rule 65 (empty)

    expression          go to state 131
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    empty               go to state 88
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    sliceExp            go to state 132
    memberShipOperator  go to state 44


state 121

   38 expression: expression . '+' term
   39           | expression . '-' term
   82 valueList: valueList ',' expression .

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 82 (valueList)


state 122

   37 variableDeclarations: IDENTIFIER '=' . expression

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    expression          go to state 133
    term                go to state 35
    power               go to state 36
    unary               go to state 37
    atom                go to state 38
    functCall           go to state 40
    list                go to state 41
    indexOp             go to state 42
    slice               go to state 43
    memberShipOperator  go to state 44


state 123

   36 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 107

    variableDeclarations  go to state 134


state 124

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 135


state 125

   31 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 110

    formalParameterDef  go to state 136
    type                go to state 115


state 126

   32 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 32 (formalParameterDef)


state 127

   12 block: '{' . statementList '}'

    $default  reduce using rule 65 (empty)

    statementList  go to state 137
    empty          go to state 3


state 128

   11 block: statement .

    $default  reduce using rule 11 (block)


state 129

    6 statement: IF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 138
    ELIF  shift, and go to state 139

    elseBlock  go to state 140


state 130

   38 expression: expression . '+' term
   39           | expression . '-' term
   78 arglist: arglist ',' expression .

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 78 (arglist)


state 131

   38 expression: expression . '+' term
   39           | expression . '-' term
   86 sliceExp: expression .

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 86 (sliceExp)


state 132

   84 slice: IDENTIFIER '[' sliceExp ':' sliceExp . ']'

    ']'  shift, and go to state 141


state 133

   37 variableDeclarations: IDENTIFIER '=' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 71
    '-'  shift, and go to state 72

    $default  reduce using rule 37 (variableDeclarations)


state 134

   36 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 36 (variableList)


state 135

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 110

    returnType  go to state 142
    type        go to state 143


state 136

   31 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 31 (formalParameterList)


state 137

    3 statementList: statementList . statement
   12 block: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 21
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '}'         shift, and go to state 144
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    statement              go to state 26
    conditionalExpression  go to state 27
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    functionDefinition     go to state 32
    variableDefinition     go to state 33
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    type                   go to state 39
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 138

    9 elseBlock: ELSE . block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 21
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 127
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    statement              go to state 128
    block                  go to state 145
    conditionalExpression  go to state 27
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    functionDefinition     go to state 32
    variableDefinition     go to state 33
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    type                   go to state 39
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 139

   10 elseBlock: ELIF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 146


state 140

    6 statement: IF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 6 (statement)


state 141

   84 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']' .

    $default  reduce using rule 84 (slice)


state 142

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 147

    functionBody  go to state 148


state 143

   26 returnType: type .

    $default  reduce using rule 26 (returnType)


state 144

   12 block: '{' statementList '}' .

    $default  reduce using rule 12 (block)


state 145

    9 elseBlock: ELSE block .

    $default  reduce using rule 9 (elseBlock)


state 146

   10 elseBlock: ELIF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 12
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 49
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    conditionalExpression  go to state 149
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 147

   27 functionBody: '{' . statementList '}'

    $default  reduce using rule 65 (empty)

    statementList  go to state 150
    empty          go to state 3


state 148

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 25 (functionDefinition)


state 149

   10 elseBlock: ELIF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 151


state 150

    3 statementList: statementList . statement
   27 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 21
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '}'         shift, and go to state 152
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    statement              go to state 26
    conditionalExpression  go to state 27
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    functionDefinition     go to state 32
    variableDefinition     go to state 33
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    type                   go to state 39
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 151

   10 elseBlock: ELIF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    SPAWN       shift, and go to state 14
    SYNC        shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    STRING      shift, and go to state 17
    BOOLEAN     shift, and go to state 18
    INTEGER     shift, and go to state 19
    DOUBLE      shift, and go to state 20
    NOTHING     shift, and go to state 21
    EMPTY       shift, and go to state 22
    '('         shift, and go to state 23
    '{'         shift, and go to state 127
    '-'         shift, and go to state 24
    '['         shift, and go to state 25

    statement              go to state 128
    block                  go to state 153
    conditionalExpression  go to state 27
    orExp                  go to state 28
    andExp                 go to state 29
    equality               go to state 30
    relationalOp           go to state 31
    functionDefinition     go to state 32
    variableDefinition     go to state 33
    expression             go to state 34
    term                   go to state 35
    power                  go to state 36
    unary                  go to state 37
    atom                   go to state 38
    type                   go to state 39
    functCall              go to state 40
    list                   go to state 41
    indexOp                go to state 42
    slice                  go to state 43
    memberShipOperator     go to state 44


state 152

   27 functionBody: '{' statementList '}' .

    $default  reduce using rule 27 (functionBody)


state 153

   10 elseBlock: ELIF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 138
    ELIF  shift, and go to state 139

    elseBlock  go to state 154


state 154

   10 elseBlock: ELIF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 10 (elseBlock)
