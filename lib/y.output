Terminals unused in grammar

   ARRAY_T


Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | IF '(' conditionalExpression ')' block elseBlock
    7          | RETURN expression ';'
    8          | expression ';'

    9 elseBlock: ELSE block
   10          | ELIF '(' conditionalExpression ')' block elseBlock

   11 block: statement
   12      | '{' statementList '}'

   13 conditionalExpression: orExp

   14 orExp: andExp
   15      | orExp OR andExp

   16 andExp: equality
   17       | andExp AND equality

   18 equality: relationalOp
   19         | equality EQUAL relationalOp

   20 relationalOp: expression '<' expression
   21             | expression LE expression
   22             | expression '>' expression
   23             | expression GE expression
   24             | expression

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

   26 returnType: type

   27 functionBody: '{' statementList '}'

   28 formalParameters: empty
   29                 | formalParameterList

   30 formalParameterList: formalParameterDef
   31                    | formalParameterList ',' formalParameterDef

   32 formalParameterDef: type IDENTIFIER

   33 $@1: /* empty */

   34 variableDefinition: type $@1 variableList

   35 variableList: variableDeclarations
   36             | variableList ',' variableDeclarations

   37 variableDeclarations: IDENTIFIER '=' expression

   38 expression: expression '+' term
   39           | expression '-' term
   40           | term

   41 term: term '*' power
   42     | term '/' power
   43     | power

   44 power: power '^' unary
   45      | unary

   46 unary: NOT unary
   47      | '-' unary
   48      | atom

   49 atom: IDENTIFIER
   50     | INTEGER
   51     | DOUBLE
   52     | STRING
   53     | NOTHING
   54     | EMPTY
   55     | functCall
   56     | list
   57     | indexOp
   58     | slice
   59     | memberShipOperator
   60     | '(' conditionalExpression ')'

   61 empty: /* empty */

   62 type: INTEGER_T
   63     | DOUBLE_T
   64     | STRING_T
   65     | FUNCTION_T
   66     | NOTHING
   67     | INTEGER_T '[' ']'

   68 functCall: IDENTIFIER '(' arguments ')'

   69 arguments: empty
   70          | arglist

   71 arglist: expression
   72        | arglist ',' expression

   73 list: '[' valueList ']'

   74 valueList: empty
   75          | expression
   76          | valueList ',' expression

   77 indexOp: IDENTIFIER '[' expression ']'

   78 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']'

   79 sliceExp: empty
   80         | expression

   81 memberShipOperator: IDENTIFIER '.' IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 10 25 60 68
')' (41) 6 10 25 60 68
'*' (42) 41
'+' (43) 38
',' (44) 31 36 72 76
'-' (45) 39 47
'.' (46) 81
'/' (47) 42
':' (58) 25 78
';' (59) 4 7 8
'<' (60) 20
'=' (61) 37
'>' (62) 22
'[' (91) 67 73 77 78
']' (93) 67 73 77 78
'^' (94) 44
'{' (123) 12 27
'}' (125) 12 27
error (256)
FUNCTION (258) 25
INTEGER_T (259) 62 67
DOUBLE_T (260) 63
STRING_T (261) 64
FUNCTION_T (262) 65
OR (263) 15
AND (264) 17
EQUAL (265) 19
LE (266) 21
GE (267) 23
IF (268) 6
ELSE (269) 9
NOT (270) 46
ELIF (271) 10
RETURN (272) 7
ARRAY_T (273)
IDENTIFIER (274) 25 32 37 49 68 77 78 81
STRING (275) 52
INTEGER (276) 50
DOUBLE (277) 51
NOTHING (278) 53 66
EMPTY (279) 54


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
statementList (45)
    on left: 2 3, on right: 1 3 12 27
statement (46)
    on left: 4 5 6 7 8, on right: 3 11
elseBlock (47)
    on left: 9 10, on right: 6 10
block (48)
    on left: 11 12, on right: 6 9 10
conditionalExpression (49)
    on left: 13, on right: 6 10 60
orExp (50)
    on left: 14 15, on right: 13 15
andExp (51)
    on left: 16 17, on right: 14 15 17
equality (52)
    on left: 18 19, on right: 16 17 19
relationalOp (53)
    on left: 20 21 22 23 24, on right: 18 19
functionDefinition (54)
    on left: 25, on right: 5
returnType (55)
    on left: 26, on right: 25
functionBody (56)
    on left: 27, on right: 25
formalParameters (57)
    on left: 28 29, on right: 25
formalParameterList (58)
    on left: 30 31, on right: 29 31
formalParameterDef (59)
    on left: 32, on right: 30 31
variableDefinition (60)
    on left: 34, on right: 4
$@1 (61)
    on left: 33, on right: 34
variableList (62)
    on left: 35 36, on right: 34 36
variableDeclarations (63)
    on left: 37, on right: 35 36
expression (64)
    on left: 38 39 40, on right: 7 8 20 21 22 23 24 37 38 39 71 72
    75 76 77 80
term (65)
    on left: 41 42 43, on right: 38 39 40 41 42
power (66)
    on left: 44 45, on right: 41 42 43 44
unary (67)
    on left: 46 47 48, on right: 44 45 46 47
atom (68)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60, on right: 48
empty (69)
    on left: 61, on right: 2 28 69 74 79
type (70)
    on left: 62 63 64 65 66 67, on right: 26 32 34
functCall (71)
    on left: 68, on right: 55
arguments (72)
    on left: 69 70, on right: 68
arglist (73)
    on left: 71 72, on right: 70 72
list (74)
    on left: 73, on right: 56
valueList (75)
    on left: 74 75 76, on right: 73 76
indexOp (76)
    on left: 77, on right: 57
slice (77)
    on left: 78, on right: 58
sliceExp (78)
    on left: 79 80, on right: 78
memberShipOperator (79)
    on left: 81, on right: 59


state 0

    0 $accept: . program $end

    $default  reduce using rule 61 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    $default  reduce using rule 1 (program)

    statement           go to state 22
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

   25 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 36


state 6

   62 type: INTEGER_T .
   67     | INTEGER_T . '[' ']'

    '['  shift, and go to state 37

    $default  reduce using rule 62 (type)


state 7

   63 type: DOUBLE_T .

    $default  reduce using rule 63 (type)


state 8

   64 type: STRING_T .

    $default  reduce using rule 64 (type)


state 9

   65 type: FUNCTION_T .

    $default  reduce using rule 65 (type)


state 10

    6 statement: IF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 38


state 11

   46 unary: NOT . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    unary               go to state 40
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 12

    7 statement: RETURN . expression ';'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression          go to state 41
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 13

   49 atom: IDENTIFIER .
   68 functCall: IDENTIFIER . '(' arguments ')'
   77 indexOp: IDENTIFIER . '[' expression ']'
   78 slice: IDENTIFIER . '[' sliceExp ':' sliceExp ']'
   81 memberShipOperator: IDENTIFIER . '.' IDENTIFIER

    '('  shift, and go to state 42
    '['  shift, and go to state 43
    '.'  shift, and go to state 44

    $default  reduce using rule 49 (atom)


state 14

   52 atom: STRING .

    $default  reduce using rule 52 (atom)


state 15

   50 atom: INTEGER .

    $default  reduce using rule 50 (atom)


state 16

   51 atom: DOUBLE .

    $default  reduce using rule 51 (atom)


state 17

   53 atom: NOTHING .
   66 type: NOTHING .

    IDENTIFIER  reduce using rule 66 (type)
    $default    reduce using rule 53 (atom)


state 18

   54 atom: EMPTY .

    $default  reduce using rule 54 (atom)


state 19

   60 atom: '(' . conditionalExpression ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    conditionalExpression  go to state 45
    orExp                  go to state 46
    andExp                 go to state 47
    equality               go to state 48
    relationalOp           go to state 49
    expression             go to state 50
    term                   go to state 26
    power                  go to state 27
    unary                  go to state 28
    atom                   go to state 29
    functCall              go to state 31
    list                   go to state 32
    indexOp                go to state 33
    slice                  go to state 34
    memberShipOperator     go to state 35


state 20

   47 unary: '-' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    unary               go to state 51
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 21

   73 list: '[' . valueList ']'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    $default  reduce using rule 61 (empty)

    expression          go to state 52
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    empty               go to state 53
    functCall           go to state 31
    list                go to state 32
    valueList           go to state 54
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 22

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 23

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 24

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 55


state 25

    8 statement: expression . ';'
   38 expression: expression . '+' term
   39           | expression . '-' term

    ';'  shift, and go to state 56
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58


state 26

   40 expression: term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 59
    '/'  shift, and go to state 60

    $default  reduce using rule 40 (expression)


state 27

   43 term: power .
   44 power: power . '^' unary

    '^'  shift, and go to state 61

    $default  reduce using rule 43 (term)


state 28

   45 power: unary .

    $default  reduce using rule 45 (power)


state 29

   48 unary: atom .

    $default  reduce using rule 48 (unary)


state 30

   34 variableDefinition: type . $@1 variableList

    $default  reduce using rule 33 ($@1)

    $@1  go to state 62


state 31

   55 atom: functCall .

    $default  reduce using rule 55 (atom)


state 32

   56 atom: list .

    $default  reduce using rule 56 (atom)


state 33

   57 atom: indexOp .

    $default  reduce using rule 57 (atom)


state 34

   58 atom: slice .

    $default  reduce using rule 58 (atom)


state 35

   59 atom: memberShipOperator .

    $default  reduce using rule 59 (atom)


state 36

   25 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 63


state 37

   67 type: INTEGER_T '[' . ']'

    ']'  shift, and go to state 64


state 38

    6 statement: IF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    conditionalExpression  go to state 65
    orExp                  go to state 46
    andExp                 go to state 47
    equality               go to state 48
    relationalOp           go to state 49
    expression             go to state 50
    term                   go to state 26
    power                  go to state 27
    unary                  go to state 28
    atom                   go to state 29
    functCall              go to state 31
    list                   go to state 32
    indexOp                go to state 33
    slice                  go to state 34
    memberShipOperator     go to state 35


state 39

   53 atom: NOTHING .

    $default  reduce using rule 53 (atom)


state 40

   46 unary: NOT unary .

    $default  reduce using rule 46 (unary)


state 41

    7 statement: RETURN expression . ';'
   38 expression: expression . '+' term
   39           | expression . '-' term

    ';'  shift, and go to state 66
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58


state 42

   68 functCall: IDENTIFIER '(' . arguments ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    $default  reduce using rule 61 (empty)

    expression          go to state 67
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    empty               go to state 68
    functCall           go to state 31
    arguments           go to state 69
    arglist             go to state 70
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 43

   77 indexOp: IDENTIFIER '[' . expression ']'
   78 slice: IDENTIFIER '[' . sliceExp ':' sliceExp ']'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    $default  reduce using rule 61 (empty)

    expression          go to state 71
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    empty               go to state 72
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    sliceExp            go to state 73
    memberShipOperator  go to state 35


state 44

   81 memberShipOperator: IDENTIFIER '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 74


state 45

   60 atom: '(' conditionalExpression . ')'

    ')'  shift, and go to state 75


state 46

   13 conditionalExpression: orExp .
   15 orExp: orExp . OR andExp

    OR  shift, and go to state 76

    $default  reduce using rule 13 (conditionalExpression)


state 47

   14 orExp: andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 77

    $default  reduce using rule 14 (orExp)


state 48

   16 andExp: equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 78

    $default  reduce using rule 16 (andExp)


state 49

   18 equality: relationalOp .

    $default  reduce using rule 18 (equality)


state 50

   20 relationalOp: expression . '<' expression
   21             | expression . LE expression
   22             | expression . '>' expression
   23             | expression . GE expression
   24             | expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    LE   shift, and go to state 79
    GE   shift, and go to state 80
    '<'  shift, and go to state 81
    '>'  shift, and go to state 82
    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 24 (relationalOp)


state 51

   47 unary: '-' unary .

    $default  reduce using rule 47 (unary)


state 52

   38 expression: expression . '+' term
   39           | expression . '-' term
   75 valueList: expression .

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 75 (valueList)


state 53

   74 valueList: empty .

    $default  reduce using rule 74 (valueList)


state 54

   73 list: '[' valueList . ']'
   76 valueList: valueList . ',' expression

    ','  shift, and go to state 83
    ']'  shift, and go to state 84


state 55

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 56

    8 statement: expression ';' .

    $default  reduce using rule 8 (statement)


state 57

   38 expression: expression '+' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    term                go to state 85
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 58

   39 expression: expression '-' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    term                go to state 86
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 59

   41 term: term '*' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    power               go to state 87
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 60

   42 term: term '/' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    power               go to state 88
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 61

   44 power: power '^' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    unary               go to state 89
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 62

   34 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 90

    variableList          go to state 91
    variableDeclarations  go to state 92


state 63

   25 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 93

    $default  reduce using rule 61 (empty)

    formalParameters     go to state 94
    formalParameterList  go to state 95
    formalParameterDef   go to state 96
    empty                go to state 97
    type                 go to state 98


state 64

   67 type: INTEGER_T '[' ']' .

    $default  reduce using rule 67 (type)


state 65

    6 statement: IF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 99


state 66

    7 statement: RETURN expression ';' .

    $default  reduce using rule 7 (statement)


state 67

   38 expression: expression . '+' term
   39           | expression . '-' term
   71 arglist: expression .

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 71 (arglist)


state 68

   69 arguments: empty .

    $default  reduce using rule 69 (arguments)


state 69

   68 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 100


state 70

   70 arguments: arglist .
   72 arglist: arglist . ',' expression

    ','  shift, and go to state 101

    $default  reduce using rule 70 (arguments)


state 71

   38 expression: expression . '+' term
   39           | expression . '-' term
   77 indexOp: IDENTIFIER '[' expression . ']'
   80 sliceExp: expression .

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58
    ']'  shift, and go to state 102

    $default  reduce using rule 80 (sliceExp)


state 72

   79 sliceExp: empty .

    $default  reduce using rule 79 (sliceExp)


state 73

   78 slice: IDENTIFIER '[' sliceExp . ':' sliceExp ']'

    ':'  shift, and go to state 103


state 74

   81 memberShipOperator: IDENTIFIER '.' IDENTIFIER .

    $default  reduce using rule 81 (memberShipOperator)


state 75

   60 atom: '(' conditionalExpression ')' .

    $default  reduce using rule 60 (atom)


state 76

   15 orExp: orExp OR . andExp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    andExp              go to state 104
    equality            go to state 48
    relationalOp        go to state 49
    expression          go to state 50
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 77

   17 andExp: andExp AND . equality

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    equality            go to state 105
    relationalOp        go to state 49
    expression          go to state 50
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 78

   19 equality: equality EQUAL . relationalOp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    relationalOp        go to state 106
    expression          go to state 50
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 79

   21 relationalOp: expression LE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression          go to state 107
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 80

   23 relationalOp: expression GE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression          go to state 108
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 81

   20 relationalOp: expression '<' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression          go to state 109
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 82

   22 relationalOp: expression '>' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression          go to state 110
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 83

   76 valueList: valueList ',' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression          go to state 111
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 84

   73 list: '[' valueList ']' .

    $default  reduce using rule 73 (list)


state 85

   38 expression: expression '+' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 59
    '/'  shift, and go to state 60

    $default  reduce using rule 38 (expression)


state 86

   39 expression: expression '-' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 59
    '/'  shift, and go to state 60

    $default  reduce using rule 39 (expression)


state 87

   41 term: term '*' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 61

    $default  reduce using rule 41 (term)


state 88

   42 term: term '/' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 61

    $default  reduce using rule 42 (term)


state 89

   44 power: power '^' unary .

    $default  reduce using rule 44 (power)


state 90

   37 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 112


state 91

   34 variableDefinition: type $@1 variableList .
   36 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 113

    $default  reduce using rule 34 (variableDefinition)


state 92

   35 variableList: variableDeclarations .

    $default  reduce using rule 35 (variableList)


state 93

   66 type: NOTHING .

    $default  reduce using rule 66 (type)


state 94

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 114


state 95

   29 formalParameters: formalParameterList .
   31 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 115

    $default  reduce using rule 29 (formalParameters)


state 96

   30 formalParameterList: formalParameterDef .

    $default  reduce using rule 30 (formalParameterList)


state 97

   28 formalParameters: empty .

    $default  reduce using rule 28 (formalParameters)


state 98

   32 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 116


state 99

    6 statement: IF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 117
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 118
    block               go to state 119
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 100

   68 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 68 (functCall)


state 101

   72 arglist: arglist ',' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression          go to state 120
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 102

   77 indexOp: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 77 (indexOp)


state 103

   78 slice: IDENTIFIER '[' sliceExp ':' . sliceExp ']'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    $default  reduce using rule 61 (empty)

    expression          go to state 121
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    empty               go to state 72
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    sliceExp            go to state 122
    memberShipOperator  go to state 35


state 104

   15 orExp: orExp OR andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 77

    $default  reduce using rule 15 (orExp)


state 105

   17 andExp: andExp AND equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 78

    $default  reduce using rule 17 (andExp)


state 106

   19 equality: equality EQUAL relationalOp .

    $default  reduce using rule 19 (equality)


state 107

   21 relationalOp: expression LE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 21 (relationalOp)


state 108

   23 relationalOp: expression GE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 23 (relationalOp)


state 109

   20 relationalOp: expression '<' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 20 (relationalOp)


state 110

   22 relationalOp: expression '>' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 22 (relationalOp)


state 111

   38 expression: expression . '+' term
   39           | expression . '-' term
   76 valueList: valueList ',' expression .

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 76 (valueList)


state 112

   37 variableDeclarations: IDENTIFIER '=' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    expression          go to state 123
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 113

   36 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 90

    variableDeclarations  go to state 124


state 114

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 125


state 115

   31 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 93

    formalParameterDef  go to state 126
    type                go to state 98


state 116

   32 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 32 (formalParameterDef)


state 117

   12 block: '{' . statementList '}'

    $default  reduce using rule 61 (empty)

    statementList  go to state 127
    empty          go to state 3


state 118

   11 block: statement .

    $default  reduce using rule 11 (block)


state 119

    6 statement: IF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 128
    ELIF  shift, and go to state 129

    elseBlock  go to state 130


state 120

   38 expression: expression . '+' term
   39           | expression . '-' term
   72 arglist: arglist ',' expression .

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 72 (arglist)


state 121

   38 expression: expression . '+' term
   39           | expression . '-' term
   80 sliceExp: expression .

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 80 (sliceExp)


state 122

   78 slice: IDENTIFIER '[' sliceExp ':' sliceExp . ']'

    ']'  shift, and go to state 131


state 123

   37 variableDeclarations: IDENTIFIER '=' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 57
    '-'  shift, and go to state 58

    $default  reduce using rule 37 (variableDeclarations)


state 124

   36 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 36 (variableList)


state 125

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 93

    returnType  go to state 132
    type        go to state 133


state 126

   31 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 31 (formalParameterList)


state 127

    3 statementList: statementList . statement
   12 block: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '}'         shift, and go to state 134
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 22
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 128

    9 elseBlock: ELSE . block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 117
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 118
    block               go to state 135
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 129

   10 elseBlock: ELIF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 136


state 130

    6 statement: IF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 6 (statement)


state 131

   78 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']' .

    $default  reduce using rule 78 (slice)


state 132

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 137

    functionBody  go to state 138


state 133

   26 returnType: type .

    $default  reduce using rule 26 (returnType)


state 134

   12 block: '{' statementList '}' .

    $default  reduce using rule 12 (block)


state 135

    9 elseBlock: ELSE block .

    $default  reduce using rule 9 (elseBlock)


state 136

   10 elseBlock: ELIF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 39
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    conditionalExpression  go to state 139
    orExp                  go to state 46
    andExp                 go to state 47
    equality               go to state 48
    relationalOp           go to state 49
    expression             go to state 50
    term                   go to state 26
    power                  go to state 27
    unary                  go to state 28
    atom                   go to state 29
    functCall              go to state 31
    list                   go to state 32
    indexOp                go to state 33
    slice                  go to state 34
    memberShipOperator     go to state 35


state 137

   27 functionBody: '{' . statementList '}'

    $default  reduce using rule 61 (empty)

    statementList  go to state 140
    empty          go to state 3


state 138

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 25 (functionDefinition)


state 139

   10 elseBlock: ELIF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 141


state 140

    3 statementList: statementList . statement
   27 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '}'         shift, and go to state 142
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 22
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 141

   10 elseBlock: ELIF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    RETURN      shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    STRING      shift, and go to state 14
    INTEGER     shift, and go to state 15
    DOUBLE      shift, and go to state 16
    NOTHING     shift, and go to state 17
    EMPTY       shift, and go to state 18
    '('         shift, and go to state 19
    '{'         shift, and go to state 117
    '-'         shift, and go to state 20
    '['         shift, and go to state 21

    statement           go to state 118
    block               go to state 143
    functionDefinition  go to state 23
    variableDefinition  go to state 24
    expression          go to state 25
    term                go to state 26
    power               go to state 27
    unary               go to state 28
    atom                go to state 29
    type                go to state 30
    functCall           go to state 31
    list                go to state 32
    indexOp             go to state 33
    slice               go to state 34
    memberShipOperator  go to state 35


state 142

   27 functionBody: '{' statementList '}' .

    $default  reduce using rule 27 (functionBody)


state 143

   10 elseBlock: ELIF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 128
    ELIF  shift, and go to state 129

    elseBlock  go to state 144


state 144

   10 elseBlock: ELIF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 10 (elseBlock)
