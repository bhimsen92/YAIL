State 95 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | IF '(' conditionalExpression ')' block
    7          | IF '(' conditionalExpression ')' block ELSE block
    8          | expression ';'

    9 block: statement
   10      | '{' statementList '}'

   11 conditionalExpression: orExp

   12 orExp: andExp
   13      | orExp OR andExp

   14 andExp: equality
   15       | andExp AND equality

   16 equality: relationalOp
   17         | equality EQUAL relationalOp

   18 relationalOp: expression '<' expression
   19             | expression LE expression
   20             | expression '>' expression
   21             | expression GE expression
   22             | expression

   23 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

   24 returnType: type

   25 functionBody: '{' statementList '}'

   26 formalParameters: empty
   27                 | formalParameterList

   28 formalParameterList: formalParameterDef
   29                    | formalParameterList ',' formalParameterDef

   30 formalParameterDef: type IDENTIFIER

   31 $@1: /* empty */

   32 variableDefinition: type $@1 variableList

   33 variableList: variableDeclarations
   34             | variableList ',' variableDeclarations

   35 variableDeclarations: IDENTIFIER '=' expression

   36 expression: expression '+' term
   37           | expression '-' term
   38           | term

   39 term: term '*' power
   40     | term '/' power
   41     | power

   42 power: power '^' unary
   43      | unary

   44 unary: NOT unary
   45      | '-' unary
   46      | atom

   47 atom: IDENTIFIER
   48     | INTEGER
   49     | DOUBLE
   50     | STRING
   51     | NOTHING
   52     | EMPTY
   53     | functCall
   54     | '(' conditionalExpression ')'

   55 empty: /* empty */

   56 type: INTEGER_T
   57     | DOUBLE_T
   58     | STRING_T
   59     | FUNCTION_T
   60     | NOTHING

   61 functCall: IDENTIFIER '(' arguments ')'

   62 arguments: empty
   63          | arglist

   64 arglist: expression
   65        | arglist ',' expression


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 7 23 54 61
')' (41) 6 7 23 54 61
'*' (42) 39
'+' (43) 36
',' (44) 29 34 65
'-' (45) 37 45
'/' (47) 40
':' (58) 23
';' (59) 4 8
'<' (60) 18
'=' (61) 35
'>' (62) 20
'^' (94) 42
'{' (123) 10 25
'}' (125) 10 25
error (256)
FUNCTION (258) 23
INTEGER_T (259) 56
DOUBLE_T (260) 57
STRING_T (261) 58
FUNCTION_T (262) 59
OR (263) 13
AND (264) 15
EQUAL (265) 17
LE (266) 19
GE (267) 21
IF (268) 6 7
ELSE (269) 7
NOT (270) 44
IDENTIFIER (271) 23 30 35 47 61
STRING (272) 50
INTEGER (273) 48
DOUBLE (274) 49
NOTHING (275) 51 60
EMPTY (276) 52


Nonterminals, with rules where they appear

$accept (37)
    on left: 0
program (38)
    on left: 1, on right: 0
statementList (39)
    on left: 2 3, on right: 1 3 10 25
statement (40)
    on left: 4 5 6 7 8, on right: 3 9
block (41)
    on left: 9 10, on right: 6 7
conditionalExpression (42)
    on left: 11, on right: 6 7 54
orExp (43)
    on left: 12 13, on right: 11 13
andExp (44)
    on left: 14 15, on right: 12 13 15
equality (45)
    on left: 16 17, on right: 14 15 17
relationalOp (46)
    on left: 18 19 20 21 22, on right: 16 17
functionDefinition (47)
    on left: 23, on right: 5
returnType (48)
    on left: 24, on right: 23
functionBody (49)
    on left: 25, on right: 23
formalParameters (50)
    on left: 26 27, on right: 23
formalParameterList (51)
    on left: 28 29, on right: 27 29
formalParameterDef (52)
    on left: 30, on right: 28 29
variableDefinition (53)
    on left: 32, on right: 4
$@1 (54)
    on left: 31, on right: 32
variableList (55)
    on left: 33 34, on right: 32 34
variableDeclarations (56)
    on left: 35, on right: 33 34
expression (57)
    on left: 36 37 38, on right: 8 18 19 20 21 22 35 36 37 64 65
term (58)
    on left: 39 40 41, on right: 36 37 38 39 40
power (59)
    on left: 42 43, on right: 39 40 41 42
unary (60)
    on left: 44 45 46, on right: 42 43 44 45
atom (61)
    on left: 47 48 49 50 51 52 53 54, on right: 46
empty (62)
    on left: 55, on right: 2 26 62
type (63)
    on left: 56 57 58 59 60, on right: 24 30 32
functCall (64)
    on left: 61, on right: 53
arguments (65)
    on left: 62 63, on right: 61
arglist (66)
    on left: 64 65, on right: 63 65


state 0

    0 $accept: . program $end

    $default  reduce using rule 55 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    $default  reduce using rule 1 (program)

    statement           go to state 20
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

   23 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 30


state 6

   56 type: INTEGER_T .

    $default  reduce using rule 56 (type)


state 7

   57 type: DOUBLE_T .

    $default  reduce using rule 57 (type)


state 8

   58 type: STRING_T .

    $default  reduce using rule 58 (type)


state 9

   59 type: FUNCTION_T .

    $default  reduce using rule 59 (type)


state 10

    6 statement: IF . '(' conditionalExpression ')' block
    7          | IF . '(' conditionalExpression ')' block ELSE block

    '('  shift, and go to state 31


state 11

   44 unary: NOT . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    unary      go to state 33
    atom       go to state 27
    functCall  go to state 29


state 12

   47 atom: IDENTIFIER .
   61 functCall: IDENTIFIER . '(' arguments ')'

    '('  shift, and go to state 34

    $default  reduce using rule 47 (atom)


state 13

   50 atom: STRING .

    $default  reduce using rule 50 (atom)


state 14

   48 atom: INTEGER .

    $default  reduce using rule 48 (atom)


state 15

   49 atom: DOUBLE .

    $default  reduce using rule 49 (atom)


state 16

   51 atom: NOTHING .
   60 type: NOTHING .

    IDENTIFIER  reduce using rule 60 (type)
    $default    reduce using rule 51 (atom)


state 17

   52 atom: EMPTY .

    $default  reduce using rule 52 (atom)


state 18

   54 atom: '(' . conditionalExpression ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    conditionalExpression  go to state 35
    orExp                  go to state 36
    andExp                 go to state 37
    equality               go to state 38
    relationalOp           go to state 39
    expression             go to state 40
    term                   go to state 24
    power                  go to state 25
    unary                  go to state 26
    atom                   go to state 27
    functCall              go to state 29


state 19

   45 unary: '-' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    unary      go to state 41
    atom       go to state 27
    functCall  go to state 29


state 20

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 21

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 22

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 42


state 23

    8 statement: expression . ';'
   36 expression: expression . '+' term
   37           | expression . '-' term

    ';'  shift, and go to state 43
    '+'  shift, and go to state 44
    '-'  shift, and go to state 45


state 24

   38 expression: term .
   39 term: term . '*' power
   40     | term . '/' power

    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 38 (expression)


state 25

   41 term: power .
   42 power: power . '^' unary

    '^'  shift, and go to state 48

    $default  reduce using rule 41 (term)


state 26

   43 power: unary .

    $default  reduce using rule 43 (power)


state 27

   46 unary: atom .

    $default  reduce using rule 46 (unary)


state 28

   32 variableDefinition: type . $@1 variableList

    $default  reduce using rule 31 ($@1)

    $@1  go to state 49


state 29

   53 atom: functCall .

    $default  reduce using rule 53 (atom)


state 30

   23 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 50


state 31

    6 statement: IF '(' . conditionalExpression ')' block
    7          | IF '(' . conditionalExpression ')' block ELSE block

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    conditionalExpression  go to state 51
    orExp                  go to state 36
    andExp                 go to state 37
    equality               go to state 38
    relationalOp           go to state 39
    expression             go to state 40
    term                   go to state 24
    power                  go to state 25
    unary                  go to state 26
    atom                   go to state 27
    functCall              go to state 29


state 32

   51 atom: NOTHING .

    $default  reduce using rule 51 (atom)


state 33

   44 unary: NOT unary .

    $default  reduce using rule 44 (unary)


state 34

   61 functCall: IDENTIFIER '(' . arguments ')'

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    $default  reduce using rule 55 (empty)

    expression  go to state 52
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    empty       go to state 53
    functCall   go to state 29
    arguments   go to state 54
    arglist     go to state 55


state 35

   54 atom: '(' conditionalExpression . ')'

    ')'  shift, and go to state 56


state 36

   11 conditionalExpression: orExp .
   13 orExp: orExp . OR andExp

    OR  shift, and go to state 57

    $default  reduce using rule 11 (conditionalExpression)


state 37

   12 orExp: andExp .
   15 andExp: andExp . AND equality

    AND  shift, and go to state 58

    $default  reduce using rule 12 (orExp)


state 38

   14 andExp: equality .
   17 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 59

    $default  reduce using rule 14 (andExp)


state 39

   16 equality: relationalOp .

    $default  reduce using rule 16 (equality)


state 40

   18 relationalOp: expression . '<' expression
   19             | expression . LE expression
   20             | expression . '>' expression
   21             | expression . GE expression
   22             | expression .
   36 expression: expression . '+' term
   37           | expression . '-' term

    LE   shift, and go to state 60
    GE   shift, and go to state 61
    '<'  shift, and go to state 62
    '>'  shift, and go to state 63
    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 22 (relationalOp)


state 41

   45 unary: '-' unary .

    $default  reduce using rule 45 (unary)


state 42

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 43

    8 statement: expression ';' .

    $default  reduce using rule 8 (statement)


state 44

   36 expression: expression '+' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    term       go to state 64
    power      go to state 25
    unary      go to state 26
    atom       go to state 27
    functCall  go to state 29


state 45

   37 expression: expression '-' . term

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    term       go to state 65
    power      go to state 25
    unary      go to state 26
    atom       go to state 27
    functCall  go to state 29


state 46

   39 term: term '*' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    power      go to state 66
    unary      go to state 26
    atom       go to state 27
    functCall  go to state 29


state 47

   40 term: term '/' . power

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    power      go to state 67
    unary      go to state 26
    atom       go to state 27
    functCall  go to state 29


state 48

   42 power: power '^' . unary

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    unary      go to state 68
    atom       go to state 27
    functCall  go to state 29


state 49

   32 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 69

    variableList          go to state 70
    variableDeclarations  go to state 71


state 50

   23 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 72

    $default  reduce using rule 55 (empty)

    formalParameters     go to state 73
    formalParameterList  go to state 74
    formalParameterDef   go to state 75
    empty                go to state 76
    type                 go to state 77


state 51

    6 statement: IF '(' conditionalExpression . ')' block
    7          | IF '(' conditionalExpression . ')' block ELSE block

    ')'  shift, and go to state 78


state 52

   36 expression: expression . '+' term
   37           | expression . '-' term
   64 arglist: expression .

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 64 (arglist)


state 53

   62 arguments: empty .

    $default  reduce using rule 62 (arguments)


state 54

   61 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 79


state 55

   63 arguments: arglist .
   65 arglist: arglist . ',' expression

    ','  shift, and go to state 80

    $default  reduce using rule 63 (arguments)


state 56

   54 atom: '(' conditionalExpression ')' .

    $default  reduce using rule 54 (atom)


state 57

   13 orExp: orExp OR . andExp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    andExp        go to state 81
    equality      go to state 38
    relationalOp  go to state 39
    expression    go to state 40
    term          go to state 24
    power         go to state 25
    unary         go to state 26
    atom          go to state 27
    functCall     go to state 29


state 58

   15 andExp: andExp AND . equality

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    equality      go to state 82
    relationalOp  go to state 39
    expression    go to state 40
    term          go to state 24
    power         go to state 25
    unary         go to state 26
    atom          go to state 27
    functCall     go to state 29


state 59

   17 equality: equality EQUAL . relationalOp

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    relationalOp  go to state 83
    expression    go to state 40
    term          go to state 24
    power         go to state 25
    unary         go to state 26
    atom          go to state 27
    functCall     go to state 29


state 60

   19 relationalOp: expression LE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 84
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 61

   21 relationalOp: expression GE . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 85
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 62

   18 relationalOp: expression '<' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 86
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 63

   20 relationalOp: expression '>' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 87
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 64

   36 expression: expression '+' term .
   39 term: term . '*' power
   40     | term . '/' power

    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 36 (expression)


state 65

   37 expression: expression '-' term .
   39 term: term . '*' power
   40     | term . '/' power

    '*'  shift, and go to state 46
    '/'  shift, and go to state 47

    $default  reduce using rule 37 (expression)


state 66

   39 term: term '*' power .
   42 power: power . '^' unary

    '^'  shift, and go to state 48

    $default  reduce using rule 39 (term)


state 67

   40 term: term '/' power .
   42 power: power . '^' unary

    '^'  shift, and go to state 48

    $default  reduce using rule 40 (term)


state 68

   42 power: power '^' unary .

    $default  reduce using rule 42 (power)


state 69

   35 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 88


state 70

   32 variableDefinition: type $@1 variableList .
   34 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 89

    $default  reduce using rule 32 (variableDefinition)


state 71

   33 variableList: variableDeclarations .

    $default  reduce using rule 33 (variableList)


state 72

   60 type: NOTHING .

    $default  reduce using rule 60 (type)


state 73

   23 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 90


state 74

   27 formalParameters: formalParameterList .
   29 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 91

    $default  reduce using rule 27 (formalParameters)


state 75

   28 formalParameterList: formalParameterDef .

    $default  reduce using rule 28 (formalParameterList)


state 76

   26 formalParameters: empty .

    $default  reduce using rule 26 (formalParameters)


state 77

   30 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 92


state 78

    6 statement: IF '(' conditionalExpression ')' . block
    7          | IF '(' conditionalExpression ')' . block ELSE block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '{'         shift, and go to state 93
    '-'         shift, and go to state 19

    statement           go to state 94
    block               go to state 95
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 79

   61 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 61 (functCall)


state 80

   65 arglist: arglist ',' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 96
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 81

   13 orExp: orExp OR andExp .
   15 andExp: andExp . AND equality

    AND  shift, and go to state 58

    $default  reduce using rule 13 (orExp)


state 82

   15 andExp: andExp AND equality .
   17 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 59

    $default  reduce using rule 15 (andExp)


state 83

   17 equality: equality EQUAL relationalOp .

    $default  reduce using rule 17 (equality)


state 84

   19 relationalOp: expression LE expression .
   36 expression: expression . '+' term
   37           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 19 (relationalOp)


state 85

   21 relationalOp: expression GE expression .
   36 expression: expression . '+' term
   37           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 21 (relationalOp)


state 86

   18 relationalOp: expression '<' expression .
   36 expression: expression . '+' term
   37           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 18 (relationalOp)


state 87

   20 relationalOp: expression '>' expression .
   36 expression: expression . '+' term
   37           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 20 (relationalOp)


state 88

   35 variableDeclarations: IDENTIFIER '=' . expression

    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 32
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '-'         shift, and go to state 19

    expression  go to state 97
    term        go to state 24
    power       go to state 25
    unary       go to state 26
    atom        go to state 27
    functCall   go to state 29


state 89

   34 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 69

    variableDeclarations  go to state 98


state 90

   23 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 99


state 91

   29 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 72

    formalParameterDef  go to state 100
    type                go to state 77


state 92

   30 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 30 (formalParameterDef)


state 93

   10 block: '{' . statementList '}'

    $default  reduce using rule 55 (empty)

    statementList  go to state 101
    empty          go to state 3


state 94

    9 block: statement .

    $default  reduce using rule 9 (block)


state 95

    6 statement: IF '(' conditionalExpression ')' block .
    7          | IF '(' conditionalExpression ')' block . ELSE block

    ELSE  shift, and go to state 102

    ELSE      [reduce using rule 6 (statement)]
    $default  reduce using rule 6 (statement)


state 96

   36 expression: expression . '+' term
   37           | expression . '-' term
   65 arglist: arglist ',' expression .

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 65 (arglist)


state 97

   35 variableDeclarations: IDENTIFIER '=' expression .
   36 expression: expression . '+' term
   37           | expression . '-' term

    '+'  shift, and go to state 44
    '-'  shift, and go to state 45

    $default  reduce using rule 35 (variableDeclarations)


state 98

   34 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 34 (variableList)


state 99

   23 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    NOTHING     shift, and go to state 72

    returnType  go to state 103
    type        go to state 104


state 100

   29 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 29 (formalParameterList)


state 101

    3 statementList: statementList . statement
   10 block: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '}'         shift, and go to state 105
    '-'         shift, and go to state 19

    statement           go to state 20
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 102

    7 statement: IF '(' conditionalExpression ')' block ELSE . block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '{'         shift, and go to state 93
    '-'         shift, and go to state 19

    statement           go to state 94
    block               go to state 106
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 103

   23 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 107

    functionBody  go to state 108


state 104

   24 returnType: type .

    $default  reduce using rule 24 (returnType)


state 105

   10 block: '{' statementList '}' .

    $default  reduce using rule 10 (block)


state 106

    7 statement: IF '(' conditionalExpression ')' block ELSE block .

    $default  reduce using rule 7 (statement)


state 107

   25 functionBody: '{' . statementList '}'

    $default  reduce using rule 55 (empty)

    statementList  go to state 109
    empty          go to state 3


state 108

   23 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 23 (functionDefinition)


state 109

    3 statementList: statementList . statement
   25 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    IF          shift, and go to state 10
    NOT         shift, and go to state 11
    IDENTIFIER  shift, and go to state 12
    STRING      shift, and go to state 13
    INTEGER     shift, and go to state 14
    DOUBLE      shift, and go to state 15
    NOTHING     shift, and go to state 16
    EMPTY       shift, and go to state 17
    '('         shift, and go to state 18
    '}'         shift, and go to state 110
    '-'         shift, and go to state 19

    statement           go to state 20
    functionDefinition  go to state 21
    variableDefinition  go to state 22
    expression          go to state 23
    term                go to state 24
    power               go to state 25
    unary               go to state 26
    atom                go to state 27
    type                go to state 28
    functCall           go to state 29


state 110

   25 functionBody: '{' statementList '}' .

    $default  reduce using rule 25 (functionBody)
