Terminals unused in grammar

   ARRAY_T


Grammar

    0 $accept: program $end

    1 program: statementList

    2 statementList: empty
    3              | statementList statement

    4 statement: variableDefinition ';'
    5          | functionDefinition
    6          | IF '(' conditionalExpression ')' block elseBlock
    7          | RETURN conditionalExpression ';'
    8          | conditionalExpression ';'

    9 elseBlock: ELSE block
   10          | ELIF '(' conditionalExpression ')' block elseBlock

   11 block: statement
   12      | '{' statementList '}'

   13 conditionalExpression: orExp

   14 orExp: andExp
   15      | orExp OR andExp

   16 andExp: equality
   17       | andExp AND equality

   18 equality: relationalOp
   19         | equality EQUAL relationalOp

   20 relationalOp: expression '<' expression
   21             | expression LE expression
   22             | expression '>' expression
   23             | expression GE expression
   24             | expression

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

   26 returnType: type

   27 functionBody: '{' statementList '}'

   28 formalParameters: empty
   29                 | formalParameterList

   30 formalParameterList: formalParameterDef
   31                    | formalParameterList ',' formalParameterDef

   32 formalParameterDef: type IDENTIFIER

   33 $@1: /* empty */

   34 variableDefinition: type $@1 variableList

   35 variableList: variableDeclarations
   36             | variableList ',' variableDeclarations

   37 variableDeclarations: IDENTIFIER '=' expression

   38 expression: expression '+' term
   39           | expression '-' term
   40           | term

   41 term: term '*' power
   42     | term '/' power
   43     | power

   44 power: power '^' unary
   45      | unary

   46 unary: NOT unary
   47      | '-' unary
   48      | atom

   49 atom: IDENTIFIER
   50     | INTEGER
   51     | DOUBLE
   52     | STRING
   53     | NOTHING
   54     | EMPTY
   55     | functCall
   56     | list
   57     | indexOp
   58     | slice
   59     | '(' conditionalExpression ')'

   60 empty: /* empty */

   61 type: INTEGER_T
   62     | DOUBLE_T
   63     | STRING_T
   64     | FUNCTION_T
   65     | NOTHING
   66     | BOOL_T
   67     | INTEGER_T '[' ']'

   68 functCall: IDENTIFIER '(' arguments ')'

   69 arguments: empty
   70          | arglist

   71 arglist: expression
   72        | arglist ',' expression

   73 list: '[' valueList ']'

   74 valueList: empty
   75          | expression
   76          | valueList ',' expression

   77 indexOp: IDENTIFIER '[' expression ']'

   78 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']'

   79 sliceExp: empty
   80         | expression


Terminals, with rules where they appear

$end (0) 0
'(' (40) 6 10 25 59 68
')' (41) 6 10 25 59 68
'*' (42) 41
'+' (43) 38
',' (44) 31 36 72 76
'-' (45) 39 47
'/' (47) 42
':' (58) 25 78
';' (59) 4 7 8
'<' (60) 20
'=' (61) 37
'>' (62) 22
'[' (91) 67 73 77 78
']' (93) 67 73 77 78
'^' (94) 44
'{' (123) 12 27
'}' (125) 12 27
error (256)
FUNCTION (258) 25
INTEGER_T (259) 61 67
DOUBLE_T (260) 62
STRING_T (261) 63
FUNCTION_T (262) 64
BOOL_T (263) 66
OR (264) 15
AND (265) 17
EQUAL (266) 19
LE (267) 21
GE (268) 23
IF (269) 6
ELSE (270) 9
NOT (271) 46
ELIF (272) 10
RETURN (273) 7
ARRAY_T (274)
IDENTIFIER (275) 25 32 37 49 68 77 78
STRING (276) 52
INTEGER (277) 50
DOUBLE (278) 51
NOTHING (279) 53 65
EMPTY (280) 54


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
statementList (45)
    on left: 2 3, on right: 1 3 12 27
statement (46)
    on left: 4 5 6 7 8, on right: 3 11
elseBlock (47)
    on left: 9 10, on right: 6 10
block (48)
    on left: 11 12, on right: 6 9 10
conditionalExpression (49)
    on left: 13, on right: 6 7 8 10 59
orExp (50)
    on left: 14 15, on right: 13 15
andExp (51)
    on left: 16 17, on right: 14 15 17
equality (52)
    on left: 18 19, on right: 16 17 19
relationalOp (53)
    on left: 20 21 22 23 24, on right: 18 19
functionDefinition (54)
    on left: 25, on right: 5
returnType (55)
    on left: 26, on right: 25
functionBody (56)
    on left: 27, on right: 25
formalParameters (57)
    on left: 28 29, on right: 25
formalParameterList (58)
    on left: 30 31, on right: 29 31
formalParameterDef (59)
    on left: 32, on right: 30 31
variableDefinition (60)
    on left: 34, on right: 4
$@1 (61)
    on left: 33, on right: 34
variableList (62)
    on left: 35 36, on right: 34 36
variableDeclarations (63)
    on left: 37, on right: 35 36
expression (64)
    on left: 38 39 40, on right: 20 21 22 23 24 37 38 39 71 72 75 76
    77 80
term (65)
    on left: 41 42 43, on right: 38 39 40 41 42
power (66)
    on left: 44 45, on right: 41 42 43 44
unary (67)
    on left: 46 47 48, on right: 44 45 46 47
atom (68)
    on left: 49 50 51 52 53 54 55 56 57 58 59, on right: 48
empty (69)
    on left: 60, on right: 2 28 69 74 79
type (70)
    on left: 61 62 63 64 65 66 67, on right: 26 32 34
functCall (71)
    on left: 68, on right: 55
arguments (72)
    on left: 69 70, on right: 68
arglist (73)
    on left: 71 72, on right: 70 72
list (74)
    on left: 73, on right: 56
valueList (75)
    on left: 74 75 76, on right: 73 76
indexOp (76)
    on left: 77, on right: 57
slice (77)
    on left: 78, on right: 58
sliceExp (78)
    on left: 79 80, on right: 78


state 0

    0 $accept: . program $end

    $default  reduce using rule 60 (empty)

    program        go to state 1
    statementList  go to state 2
    empty          go to state 3


state 1

    0 $accept: program . $end

    $end  shift, and go to state 4


state 2

    1 program: statementList .
    3 statementList: statementList . statement

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 1 (program)

    statement              go to state 23
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 3

    2 statementList: empty .

    $default  reduce using rule 2 (statementList)


state 4

    0 $accept: program $end .

    $default  accept


state 5

   25 functionDefinition: FUNCTION . IDENTIFIER '(' formalParameters ')' ':' returnType functionBody

    IDENTIFIER  shift, and go to state 41


state 6

   61 type: INTEGER_T .
   67     | INTEGER_T . '[' ']'

    '['  shift, and go to state 42

    $default  reduce using rule 61 (type)


state 7

   62 type: DOUBLE_T .

    $default  reduce using rule 62 (type)


state 8

   63 type: STRING_T .

    $default  reduce using rule 63 (type)


state 9

   64 type: FUNCTION_T .

    $default  reduce using rule 64 (type)


state 10

   66 type: BOOL_T .

    $default  reduce using rule 66 (type)


state 11

    6 statement: IF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 43


state 12

   46 unary: NOT . unary

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    unary      go to state 45
    atom       go to state 35
    functCall  go to state 37
    list       go to state 38
    indexOp    go to state 39
    slice      go to state 40


state 13

    7 statement: RETURN . conditionalExpression ';'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    conditionalExpression  go to state 46
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 14

   49 atom: IDENTIFIER .
   68 functCall: IDENTIFIER . '(' arguments ')'
   77 indexOp: IDENTIFIER . '[' expression ']'
   78 slice: IDENTIFIER . '[' sliceExp ':' sliceExp ']'

    '('  shift, and go to state 47
    '['  shift, and go to state 48

    $default  reduce using rule 49 (atom)


state 15

   52 atom: STRING .

    $default  reduce using rule 52 (atom)


state 16

   50 atom: INTEGER .

    $default  reduce using rule 50 (atom)


state 17

   51 atom: DOUBLE .

    $default  reduce using rule 51 (atom)


state 18

   53 atom: NOTHING .
   65 type: NOTHING .

    IDENTIFIER  reduce using rule 65 (type)
    $default    reduce using rule 53 (atom)


state 19

   54 atom: EMPTY .

    $default  reduce using rule 54 (atom)


state 20

   59 atom: '(' . conditionalExpression ')'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    conditionalExpression  go to state 49
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 21

   47 unary: '-' . unary

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    unary      go to state 50
    atom       go to state 35
    functCall  go to state 37
    list       go to state 38
    indexOp    go to state 39
    slice      go to state 40


state 22

   73 list: '[' . valueList ']'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 60 (empty)

    expression  go to state 51
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    empty       go to state 52
    functCall   go to state 37
    list        go to state 38
    valueList   go to state 53
    indexOp     go to state 39
    slice       go to state 40


state 23

    3 statementList: statementList statement .

    $default  reduce using rule 3 (statementList)


state 24

    8 statement: conditionalExpression . ';'

    ';'  shift, and go to state 54


state 25

   13 conditionalExpression: orExp .
   15 orExp: orExp . OR andExp

    OR  shift, and go to state 55

    $default  reduce using rule 13 (conditionalExpression)


state 26

   14 orExp: andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 56

    $default  reduce using rule 14 (orExp)


state 27

   16 andExp: equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 57

    $default  reduce using rule 16 (andExp)


state 28

   18 equality: relationalOp .

    $default  reduce using rule 18 (equality)


state 29

    5 statement: functionDefinition .

    $default  reduce using rule 5 (statement)


state 30

    4 statement: variableDefinition . ';'

    ';'  shift, and go to state 58


state 31

   20 relationalOp: expression . '<' expression
   21             | expression . LE expression
   22             | expression . '>' expression
   23             | expression . GE expression
   24             | expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    LE   shift, and go to state 59
    GE   shift, and go to state 60
    '<'  shift, and go to state 61
    '>'  shift, and go to state 62
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 24 (relationalOp)


state 32

   40 expression: term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 40 (expression)


state 33

   43 term: power .
   44 power: power . '^' unary

    '^'  shift, and go to state 67

    $default  reduce using rule 43 (term)


state 34

   45 power: unary .

    $default  reduce using rule 45 (power)


state 35

   48 unary: atom .

    $default  reduce using rule 48 (unary)


state 36

   34 variableDefinition: type . $@1 variableList

    $default  reduce using rule 33 ($@1)

    $@1  go to state 68


state 37

   55 atom: functCall .

    $default  reduce using rule 55 (atom)


state 38

   56 atom: list .

    $default  reduce using rule 56 (atom)


state 39

   57 atom: indexOp .

    $default  reduce using rule 57 (atom)


state 40

   58 atom: slice .

    $default  reduce using rule 58 (atom)


state 41

   25 functionDefinition: FUNCTION IDENTIFIER . '(' formalParameters ')' ':' returnType functionBody

    '('  shift, and go to state 69


state 42

   67 type: INTEGER_T '[' . ']'

    ']'  shift, and go to state 70


state 43

    6 statement: IF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    conditionalExpression  go to state 71
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 44

   53 atom: NOTHING .

    $default  reduce using rule 53 (atom)


state 45

   46 unary: NOT unary .

    $default  reduce using rule 46 (unary)


state 46

    7 statement: RETURN conditionalExpression . ';'

    ';'  shift, and go to state 72


state 47

   68 functCall: IDENTIFIER '(' . arguments ')'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 60 (empty)

    expression  go to state 73
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    empty       go to state 74
    functCall   go to state 37
    arguments   go to state 75
    arglist     go to state 76
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40


state 48

   77 indexOp: IDENTIFIER '[' . expression ']'
   78 slice: IDENTIFIER '[' . sliceExp ':' sliceExp ']'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 60 (empty)

    expression  go to state 77
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    empty       go to state 78
    functCall   go to state 37
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40
    sliceExp    go to state 79


state 49

   59 atom: '(' conditionalExpression . ')'

    ')'  shift, and go to state 80


state 50

   47 unary: '-' unary .

    $default  reduce using rule 47 (unary)


state 51

   38 expression: expression . '+' term
   39           | expression . '-' term
   75 valueList: expression .

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 75 (valueList)


state 52

   74 valueList: empty .

    $default  reduce using rule 74 (valueList)


state 53

   73 list: '[' valueList . ']'
   76 valueList: valueList . ',' expression

    ','  shift, and go to state 81
    ']'  shift, and go to state 82


state 54

    8 statement: conditionalExpression ';' .

    $default  reduce using rule 8 (statement)


state 55

   15 orExp: orExp OR . andExp

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    andExp        go to state 83
    equality      go to state 27
    relationalOp  go to state 28
    expression    go to state 31
    term          go to state 32
    power         go to state 33
    unary         go to state 34
    atom          go to state 35
    functCall     go to state 37
    list          go to state 38
    indexOp       go to state 39
    slice         go to state 40


state 56

   17 andExp: andExp AND . equality

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    equality      go to state 84
    relationalOp  go to state 28
    expression    go to state 31
    term          go to state 32
    power         go to state 33
    unary         go to state 34
    atom          go to state 35
    functCall     go to state 37
    list          go to state 38
    indexOp       go to state 39
    slice         go to state 40


state 57

   19 equality: equality EQUAL . relationalOp

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    relationalOp  go to state 85
    expression    go to state 31
    term          go to state 32
    power         go to state 33
    unary         go to state 34
    atom          go to state 35
    functCall     go to state 37
    list          go to state 38
    indexOp       go to state 39
    slice         go to state 40


state 58

    4 statement: variableDefinition ';' .

    $default  reduce using rule 4 (statement)


state 59

   21 relationalOp: expression LE . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression  go to state 86
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    functCall   go to state 37
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40


state 60

   23 relationalOp: expression GE . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression  go to state 87
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    functCall   go to state 37
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40


state 61

   20 relationalOp: expression '<' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression  go to state 88
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    functCall   go to state 37
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40


state 62

   22 relationalOp: expression '>' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression  go to state 89
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    functCall   go to state 37
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40


state 63

   38 expression: expression '+' . term

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    term       go to state 90
    power      go to state 33
    unary      go to state 34
    atom       go to state 35
    functCall  go to state 37
    list       go to state 38
    indexOp    go to state 39
    slice      go to state 40


state 64

   39 expression: expression '-' . term

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    term       go to state 91
    power      go to state 33
    unary      go to state 34
    atom       go to state 35
    functCall  go to state 37
    list       go to state 38
    indexOp    go to state 39
    slice      go to state 40


state 65

   41 term: term '*' . power

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    power      go to state 92
    unary      go to state 34
    atom       go to state 35
    functCall  go to state 37
    list       go to state 38
    indexOp    go to state 39
    slice      go to state 40


state 66

   42 term: term '/' . power

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    power      go to state 93
    unary      go to state 34
    atom       go to state 35
    functCall  go to state 37
    list       go to state 38
    indexOp    go to state 39
    slice      go to state 40


state 67

   44 power: power '^' . unary

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    unary      go to state 94
    atom       go to state 35
    functCall  go to state 37
    list       go to state 38
    indexOp    go to state 39
    slice      go to state 40


state 68

   34 variableDefinition: type $@1 . variableList

    IDENTIFIER  shift, and go to state 95

    variableList          go to state 96
    variableDeclarations  go to state 97


state 69

   25 functionDefinition: FUNCTION IDENTIFIER '(' . formalParameters ')' ':' returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 98

    $default  reduce using rule 60 (empty)

    formalParameters     go to state 99
    formalParameterList  go to state 100
    formalParameterDef   go to state 101
    empty                go to state 102
    type                 go to state 103


state 70

   67 type: INTEGER_T '[' ']' .

    $default  reduce using rule 67 (type)


state 71

    6 statement: IF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 104


state 72

    7 statement: RETURN conditionalExpression ';' .

    $default  reduce using rule 7 (statement)


state 73

   38 expression: expression . '+' term
   39           | expression . '-' term
   71 arglist: expression .

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 71 (arglist)


state 74

   69 arguments: empty .

    $default  reduce using rule 69 (arguments)


state 75

   68 functCall: IDENTIFIER '(' arguments . ')'

    ')'  shift, and go to state 105


state 76

   70 arguments: arglist .
   72 arglist: arglist . ',' expression

    ','  shift, and go to state 106

    $default  reduce using rule 70 (arguments)


state 77

   38 expression: expression . '+' term
   39           | expression . '-' term
   77 indexOp: IDENTIFIER '[' expression . ']'
   80 sliceExp: expression .

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    ']'  shift, and go to state 107

    $default  reduce using rule 80 (sliceExp)


state 78

   79 sliceExp: empty .

    $default  reduce using rule 79 (sliceExp)


state 79

   78 slice: IDENTIFIER '[' sliceExp . ':' sliceExp ']'

    ':'  shift, and go to state 108


state 80

   59 atom: '(' conditionalExpression ')' .

    $default  reduce using rule 59 (atom)


state 81

   76 valueList: valueList ',' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression  go to state 109
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    functCall   go to state 37
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40


state 82

   73 list: '[' valueList ']' .

    $default  reduce using rule 73 (list)


state 83

   15 orExp: orExp OR andExp .
   17 andExp: andExp . AND equality

    AND  shift, and go to state 56

    $default  reduce using rule 15 (orExp)


state 84

   17 andExp: andExp AND equality .
   19 equality: equality . EQUAL relationalOp

    EQUAL  shift, and go to state 57

    $default  reduce using rule 17 (andExp)


state 85

   19 equality: equality EQUAL relationalOp .

    $default  reduce using rule 19 (equality)


state 86

   21 relationalOp: expression LE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 21 (relationalOp)


state 87

   23 relationalOp: expression GE expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 23 (relationalOp)


state 88

   20 relationalOp: expression '<' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 20 (relationalOp)


state 89

   22 relationalOp: expression '>' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 22 (relationalOp)


state 90

   38 expression: expression '+' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 38 (expression)


state 91

   39 expression: expression '-' term .
   41 term: term . '*' power
   42     | term . '/' power

    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 39 (expression)


state 92

   41 term: term '*' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 67

    $default  reduce using rule 41 (term)


state 93

   42 term: term '/' power .
   44 power: power . '^' unary

    '^'  shift, and go to state 67

    $default  reduce using rule 42 (term)


state 94

   44 power: power '^' unary .

    $default  reduce using rule 44 (power)


state 95

   37 variableDeclarations: IDENTIFIER . '=' expression

    '='  shift, and go to state 110


state 96

   34 variableDefinition: type $@1 variableList .
   36 variableList: variableList . ',' variableDeclarations

    ','  shift, and go to state 111

    $default  reduce using rule 34 (variableDefinition)


state 97

   35 variableList: variableDeclarations .

    $default  reduce using rule 35 (variableList)


state 98

   65 type: NOTHING .

    $default  reduce using rule 65 (type)


state 99

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters . ')' ':' returnType functionBody

    ')'  shift, and go to state 112


state 100

   29 formalParameters: formalParameterList .
   31 formalParameterList: formalParameterList . ',' formalParameterDef

    ','  shift, and go to state 113

    $default  reduce using rule 29 (formalParameters)


state 101

   30 formalParameterList: formalParameterDef .

    $default  reduce using rule 30 (formalParameterList)


state 102

   28 formalParameters: empty .

    $default  reduce using rule 28 (formalParameters)


state 103

   32 formalParameterDef: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 114


state 104

    6 statement: IF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 115
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 116
    block                  go to state 117
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 105

   68 functCall: IDENTIFIER '(' arguments ')' .

    $default  reduce using rule 68 (functCall)


state 106

   72 arglist: arglist ',' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression  go to state 118
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    functCall   go to state 37
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40


state 107

   77 indexOp: IDENTIFIER '[' expression ']' .

    $default  reduce using rule 77 (indexOp)


state 108

   78 slice: IDENTIFIER '[' sliceExp ':' . sliceExp ']'

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 60 (empty)

    expression  go to state 119
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    empty       go to state 78
    functCall   go to state 37
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40
    sliceExp    go to state 120


state 109

   38 expression: expression . '+' term
   39           | expression . '-' term
   76 valueList: valueList ',' expression .

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 76 (valueList)


state 110

   37 variableDeclarations: IDENTIFIER '=' . expression

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    expression  go to state 121
    term        go to state 32
    power       go to state 33
    unary       go to state 34
    atom        go to state 35
    functCall   go to state 37
    list        go to state 38
    indexOp     go to state 39
    slice       go to state 40


state 111

   36 variableList: variableList ',' . variableDeclarations

    IDENTIFIER  shift, and go to state 95

    variableDeclarations  go to state 122


state 112

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' . ':' returnType functionBody

    ':'  shift, and go to state 123


state 113

   31 formalParameterList: formalParameterList ',' . formalParameterDef

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 98

    formalParameterDef  go to state 124
    type                go to state 103


state 114

   32 formalParameterDef: type IDENTIFIER .

    $default  reduce using rule 32 (formalParameterDef)


state 115

   12 block: '{' . statementList '}'

    $default  reduce using rule 60 (empty)

    statementList  go to state 125
    empty          go to state 3


state 116

   11 block: statement .

    $default  reduce using rule 11 (block)


state 117

    6 statement: IF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 126
    ELIF  shift, and go to state 127

    elseBlock  go to state 128


state 118

   38 expression: expression . '+' term
   39           | expression . '-' term
   72 arglist: arglist ',' expression .

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 72 (arglist)


state 119

   38 expression: expression . '+' term
   39           | expression . '-' term
   80 sliceExp: expression .

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 80 (sliceExp)


state 120

   78 slice: IDENTIFIER '[' sliceExp ':' sliceExp . ']'

    ']'  shift, and go to state 129


state 121

   37 variableDeclarations: IDENTIFIER '=' expression .
   38 expression: expression . '+' term
   39           | expression . '-' term

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64

    $default  reduce using rule 37 (variableDeclarations)


state 122

   36 variableList: variableList ',' variableDeclarations .

    $default  reduce using rule 36 (variableList)


state 123

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' . returnType functionBody

    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    NOTHING     shift, and go to state 98

    returnType  go to state 130
    type        go to state 131


state 124

   31 formalParameterList: formalParameterList ',' formalParameterDef .

    $default  reduce using rule 31 (formalParameterList)


state 125

    3 statementList: statementList . statement
   12 block: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '}'         shift, and go to state 132
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 23
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 126

    9 elseBlock: ELSE . block

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 115
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 116
    block                  go to state 133
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 127

   10 elseBlock: ELIF . '(' conditionalExpression ')' block elseBlock

    '('  shift, and go to state 134


state 128

    6 statement: IF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 6 (statement)


state 129

   78 slice: IDENTIFIER '[' sliceExp ':' sliceExp ']' .

    $default  reduce using rule 78 (slice)


state 130

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType . functionBody

    '{'  shift, and go to state 135

    functionBody  go to state 136


state 131

   26 returnType: type .

    $default  reduce using rule 26 (returnType)


state 132

   12 block: '{' statementList '}' .

    $default  reduce using rule 12 (block)


state 133

    9 elseBlock: ELSE block .

    $default  reduce using rule 9 (elseBlock)


state 134

   10 elseBlock: ELIF '(' . conditionalExpression ')' block elseBlock

    NOT         shift, and go to state 12
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 44
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    conditionalExpression  go to state 137
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 135

   27 functionBody: '{' . statementList '}'

    $default  reduce using rule 60 (empty)

    statementList  go to state 138
    empty          go to state 3


state 136

   25 functionDefinition: FUNCTION IDENTIFIER '(' formalParameters ')' ':' returnType functionBody .

    $default  reduce using rule 25 (functionDefinition)


state 137

   10 elseBlock: ELIF '(' conditionalExpression . ')' block elseBlock

    ')'  shift, and go to state 139


state 138

    3 statementList: statementList . statement
   27 functionBody: '{' statementList . '}'

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '}'         shift, and go to state 140
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 23
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 139

   10 elseBlock: ELIF '(' conditionalExpression ')' . block elseBlock

    FUNCTION    shift, and go to state 5
    INTEGER_T   shift, and go to state 6
    DOUBLE_T    shift, and go to state 7
    STRING_T    shift, and go to state 8
    FUNCTION_T  shift, and go to state 9
    BOOL_T      shift, and go to state 10
    IF          shift, and go to state 11
    NOT         shift, and go to state 12
    RETURN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    STRING      shift, and go to state 15
    INTEGER     shift, and go to state 16
    DOUBLE      shift, and go to state 17
    NOTHING     shift, and go to state 18
    EMPTY       shift, and go to state 19
    '('         shift, and go to state 20
    '{'         shift, and go to state 115
    '-'         shift, and go to state 21
    '['         shift, and go to state 22

    statement              go to state 116
    block                  go to state 141
    conditionalExpression  go to state 24
    orExp                  go to state 25
    andExp                 go to state 26
    equality               go to state 27
    relationalOp           go to state 28
    functionDefinition     go to state 29
    variableDefinition     go to state 30
    expression             go to state 31
    term                   go to state 32
    power                  go to state 33
    unary                  go to state 34
    atom                   go to state 35
    type                   go to state 36
    functCall              go to state 37
    list                   go to state 38
    indexOp                go to state 39
    slice                  go to state 40


state 140

   27 functionBody: '{' statementList '}' .

    $default  reduce using rule 27 (functionBody)


state 141

   10 elseBlock: ELIF '(' conditionalExpression ')' block . elseBlock

    ELSE  shift, and go to state 126
    ELIF  shift, and go to state 127

    elseBlock  go to state 142


state 142

   10 elseBlock: ELIF '(' conditionalExpression ')' block elseBlock .

    $default  reduce using rule 10 (elseBlock)
