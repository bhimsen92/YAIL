function filter_helper(Int[] arr, Int index, Function f):Int[]{
	if(index < arr.length){
		if(f(arr[index])){
			return [arr[index]] + filter_helper(arr, index + 1, f);
		}
		else{
			return filter_helper(arr, index + 1, f);
		}
	}
	else{
		return [];
	}	
}

function filter(Int[] arr, Function f):Int[]{
	return filter_helper(arr, 0, f);
}

function le(Int x, Int a):Bool{
	return a <= x;
}
function g(Int x, Int a):Bool{
	return a > x;
}

function quickSort(Int[] arr):Int[]{
	if(arr.length > 0){
		Int x = arr[0];
		Int[] left = spawn quickSort(filter(arr[1:], le(x)));
		Int[] right = spawn quickSort(filter(arr[1:], g(x)));
		sync;
		return left + [x] + right;
	}
	else{
		return [];
	}
}

function printArray(Int[] arr):Nothing{
	if(arr.length > 0){
		print(arr[0], " ");
		printArray(arr[1:]);
	}
	else{
		newline();
	}
}

Int[] a = [10, -5, 1, 9, 4, 0, 6, -7, 3, 2, 0, 0, 0];

Int[] b = spawn quickSort(a);
printArray(b);
